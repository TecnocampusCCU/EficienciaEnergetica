# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EficEnerg
                                 A QGIS plugin
 efic energ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Miquel Rodriguez
        email                : mrodriguezj@edu.tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   Per implementar encara [TODO] :                                       *
 *   - Al finalitzar tot, escriure un manual d'usuari del plugin.          *
 *                                                                         *
 ***************************************************************************/
 
"""


import collections
import datetime
import os
import os.path
import sys
import time
import unicodedata
from os.path import expanduser

import processing
import psycopg2
import qgis.utils
from PyQt5.QtCore import *
from PyQt5.QtCore import QSizeF
from PyQt5.QtGui import *
from PyQt5.QtGui import QColor
from PyQt5.QtSql import *
from PyQt5.QtWidgets import (QAction, QApplication, QColorDialog, QMessageBox,
                             QToolBar)
from qgis.core import (QgsCategorizedSymbolRenderer, QgsProcessingParameterFeatureSink,
                       QgsCoordinateReferenceSystem, QgsDataSourceUri, QgsFillSymbol,
                       QgsDiagramLayerSettings, QgsDiagramSettings,
                       QgsGraduatedSymbolRenderer, QgsPalLayerSettings,
                       QgsPieDiagram, QgsProject, QgsProperty,
                       QgsPropertyCollection, QgsRendererCategory,
                       QgsRendererRange, QgsSimpleFillSymbolLayer,
                       QgsSimpleLineSymbolLayer,
                       QgsSingleCategoryDiagramRenderer, QgsSymbol, QgsSingleSymbolRenderer,
                       QgsTextBackgroundSettings, QgsTextFormat, QgsUnitTypes,
                       QgsVectorLayer, QgsVectorLayerExporter,
                       QgsVectorLayerSimpleLabeling, QgsWkbTypes, QgsProcessing, QgsProcessingAlgorithm, QgsProcessingParameterMapLayer, QgsProcessingParameterBoolean)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QMessageBox
from qgis.utils import iface

# Import the code for the dialog
from .eficiencia_energetica_dialog import EficEnergDialog
# Initialize Qt resources from file resources.py
from .resources import *

'''Varibles globals'''
Versio_modul = "V_Q3.231113"
nomBD1 = ""
password1 = ""
host1 = ""
port1 = ""
user1 = ""
cur = None
conn = None
progress = None
textBox = ""
uri = None
numOperacions = 0
numEntitats = 0
fitxer = ""
color = QColor(0,0,0)
minimumValue = 0
maximumValue = 0
estandar = True
personalitzat = False
consum = False
emissions = False

habitatges = "cert_efi_energ_edif_mataro_geom"
habitatgesLayer = None
entitat = None
entitatLayer = None
entitatLayerJoined = None
entitatLayerResumNumHabit = None
entitatLayerResumm2 = None
entitatLayerResumMitjana = None
entitatLayerResumModa = None
entitatLayerResumMediana = None

results = {}
outputs = {}
parameters = {}

llistaEntitats = [
    None, # Entitat per defecte, ha de donar error
    "parcel",
    "ILLES",
    "Seccions",
    "Barris",
    "DistrictesPostals",
    "Districtes"
]



colors = {
    'colorA': QColor.fromCmykF(0.85, 0.15, 0.95, 0.30),
    'colorB': QColor.fromCmykF(0.80, 0.00, 1.00, 0.00),
    'colorC': QColor.fromCmykF(0.45, 0.00, 1.00, 0.00),
    'colorD': QColor.fromCmykF(0.10, 0.00, 0.95, 0.00),
    'colorE': QColor.fromCmykF(0.05, 0.30, 1.00, 0.00),
    'colorF': QColor.fromCmykF(0.10, 0.65, 1.00, 0.00),
    'colorG': QColor.fromCmykF(0.05, 0.95, 0.95, 0.00)
}

symbols = {
    'symbolA': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolB': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolC': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolD': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolE': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolF': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString)),
    'symbolG': QgsSymbol.defaultSymbol(QgsWkbTypes.GeometryType(QgsWkbTypes.LineString))
}

ranges = {
    'rangeA': QgsRendererRange(0.0, 34.1, symbols['symbolA'], 'A'),
    'rangeB': QgsRendererRange(34.1, 55.5, symbols['symbolB'], 'B'),
    'rangeC': QgsRendererRange(55.5, 85.4, symbols['symbolC'], 'C'),
    'rangeD': QgsRendererRange(85.4, 111.6, symbols['symbolD'], 'D'),
    'rangeE': QgsRendererRange(111.6, 136.6, symbols['symbolE'], 'E'),
    'rangeF': QgsRendererRange(136.6, 170.7, symbols['symbolF'], 'F'),
    'rangeG': QgsRendererRange(170.7, 9999999, symbols['symbolG'], 'G')
}

class EficEnerg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EficEnerg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog and keep reference

        self.dlg = EficEnergDialog()
        
        self.dlg.pushSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.pushInici.clicked.connect(self.on_click_Inici)
        self.dlg.comboBD.currentIndexChanged.connect(self.on_change_ComboConn)
        self.dlg.comboEntitat.currentIndexChanged.connect(self.on_change_comboEntitat)
        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkm2.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_checkMitjana)
        self.dlg.checkModa.stateChanged.connect(self.on_change_checkModa)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_checkMediana)
        self.dlg.pushColorP.clicked.connect(self.on_click_color)
        self.dlg.tabPersonalitzacio.currentChanged.connect(self.on_currentChanged_tabPersonalitzacio)
        self.dlg.consumButton.toggled.connect(self.on_change_consum)
        self.dlg.emissionsButton.toggled.connect(self.on_change_emissions)

        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkm2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkModa.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_entitatsIOperacions)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CCU')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EficEnerg', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eficiencia_energetica/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Eficiencia Energetica'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def on_change_ComboConn(self):
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global cur
        global conn
        global textBox
        global uri
        s = QSettings()
        select = 'Selecciona connexió'
        nom_conn = self.dlg.comboBD.currentText()

        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()

            nomBD1 = s.value("database", "")
            password1 = s.value("password", "")
            host1 = s.value("host", "")
            port1 = s.value("port", "")
            user1 = s.value("username", "")
            #schema1 = s.value("schema", "")

            self.barraEstat_connectant()
            textBox += f"\nConnectant a la base de dades {nomBD1}...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            # Connexio
            nomBD = nomBD1.encode('ascii', 'ignore')
            user = user1.encode('ascii', 'ignore')
            server = host1.encode('ascii', 'ignore')
            password = password1.encode('ascii', 'ignore')
            #schema = schema1.encode('ascii', 'ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + user.decode("utf-8") +"' host='" + server.decode("utf-8") +"' password='" + password.decode("utf-8") + "'" # + "'schema='" + schema.decode("utf-8") + "'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                textBox += f"\nConnectat a la base de dades {nomBD1}\n"
                textBox += "\nSelecciona les entitats amb les que vulguis treballar i indica amb quines entitats treballaràs així com els camps que vols calcular i inicia el procés"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
                cur = conn.cursor()
                uri = QgsDataSourceUri()
                uri.setConnection(host1, port1, nomBD1, user1, password1)
                #schema1 = "public"

                self.dlg.groupEntitats.setEnabled(True)
                self.dlg.comboEntitat.setEnabled(True)
                self.dlg.groupChecks.setEnabled(True)
                self.dlg.pushInici.setEnabled(True)

                self.dlg.groupEntitats.setVisible(True)
                self.dlg.comboEntitat.setVisible(True)
                self.dlg.groupChecks.setVisible(True)

            except Exception as ex:
                self.estatInicial()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error canvi connexió")
                if conn is not None:
                    conn.rollback()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                return
            
            self.dlg.tabPersonalitzacio.setVisible(True)
            self.dlg.pushColor.setEnabled(False)
            self.dlg.pushColor.setStyleSheet("background-color: #707070")
            self.dlg.pushColor.setAutoFillBackground(True)
            self.dlg.minScale.setEnabled(False)
            self.dlg.maxScale.setEnabled(False)
             
        else:
            self.barraEstat_noConnectat()
    
    def on_change_comboEntitat(self):
        global uri
        global schema1
        global entitat
        global entitatLayer
        global llistaEntitats
        global habitatgesLayer
        entitat = llistaEntitats[self.dlg.comboEntitat.currentIndex()]
        schema1 = "public"
        try:
            uri.setDataSource(schema1, entitat, 'geom')
            entitatLayer = QgsVectorLayer(uri.uri(), entitat, 'postgres')
        except Exception as ex:
            print ("Error no s'ha trobat entitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error no s'ha trobat entitat")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        try:
            uri.setDataSource(schema1, habitatges, 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), habitatges, 'postgres')
        except Exception as ex:
            print ("Error no s'ha trobat entitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error no s'ha trobat entitat")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        if entitat == llistaEntitats[1]:
            self.dlg.minScale.setValue(500)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(500)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[2]:
            self.dlg.minScale.setValue(4000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(4000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[3]:
            self.dlg.minScale.setValue(10000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(10000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]:
            self.dlg.minScale.setValue(40000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(40000)
            self.dlg.maxScaleP.setValue(1)
        
    def on_change_entitatsIOperacions(self):
        if numOperacions > 2:
            self.dlg.labelAvis.setVisible(True)
        else:
            self.dlg.labelAvis.setVisible(False)

    def on_change_checkNumHabit_checkm2(self):
        global numOperacions

        self.dlg.labelRestriccio.setFont(QFont("MS Shell Dlg 2", 7))

        if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Al calcular la Mitjana, la Moda i la Mediana no es tenen en compte les superfícies dels habitatges.")
        
        if not self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Els càlculs de la Mitjana i la Moda estan ponderats per la superfície dels habitatges.")

        if self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("La Mitjana, la Moda i la Mediana utilitzen en els seus càlculs la superfície dels habitatges.")

        if not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(False)
            self.dlg.checkMitjana.setChecked(False)
            self.dlg.checkModa.setEnabled(False)
            self.dlg.checkModa.setChecked(False)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.checkMediana.setChecked(False)
            self.dlg.labelRestriccio.setVisible(False)
            self.dlg.labelRestriccio.setText(" ")

        if self.dlg.checkNumHabit.isChecked():
            numOperacions += 1
        if not self.dlg.checkNumHabit.isChecked():
            numOperacions -= 1
        
        if self.dlg.checkm2.isChecked():
            numOperacions += 1
        if not self.dlg.checkm2.isChecked():
            numOperacions -= 1
    
    def on_change_checkMitjana(self):
        global numOperacions
        if self.dlg.checkMitjana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkModa(self):
        global numOperacions
        if self.dlg.checkModa.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkMediana(self):
        global numOperacions
        if self.dlg.checkMediana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_click_color(self):
        global color
        try:
            aux = QColorDialog.getColor()
        except Exception as ex:
            print("Error al seleccionar color")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes copia")
            conn.rollback()
            return
        if aux.isValid():
            color = aux
        else:
            color = None
            pass
        if color != None:
            self.dlg.pushColorP.setStyleSheet("background-color: " + color.name())
            self.dlg.pushColorP.setAutoFillBackground(True)

    def on_currentChanged_tabPersonalitzacio(self):
        global estandar
        global personalitzat
        if self.dlg.tabPersonalitzacio.currentIndex() == 0:
            estandar = True
            personalitzat = False
        if self.dlg.tabPersonalitzacio.currentIndex() == 1:
            estandar = False
            personalitzat = True

    def on_change_consum(self):
        global consum
        global emissions
        if self.dlg.consumButton.isChecked():
            consum = True
            emissions = False
        else:
            consum = False
            emissions = True

    def on_change_emissions(self):
        global consum
        global emissions
        if self.dlg.emissionsButton.isChecked():
            emissions = True
            consum = False
        else:
            emissions = False
            consum = True

    def ompleCombos(self, combo, llista, predef, sort):
        combo.blockSignals(True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList=None
        for elem in llista:
            try:
                if isinstance(elem, tuple):
                    item = QStandardItem(str(elem[0]))
                else:
                    item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem[0].encode('utf-8')))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def getConnections(self):
        '''Aquesta funció retorna les connexions que estan guardades en el projecte.'''
        s = QSettings()
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections

    def estatInicial(self):
        global textBox
        global Versio_modul
        self.dlg.comboBD.setCurrentIndex(0)
        self.dlg.comboEntitat.setCurrentIndex(0)
        self.barraEstat_noConnectat()
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        self.dlg.textEstat.clear()
        self.dlg.versio.setText(Versio_modul)
        self.dlg.groupEntitats.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.pushInici.setEnabled(False)
        self.dlg.groupChecks.setVisible(False)
        self.dlg.groupEntitats.setVisible(False)
        self.dlg.comboEntitat.setVisible(False)
        self.dlg.checkMitjana.setEnabled(False)
        self.dlg.checkModa.setEnabled(False)
        self.dlg.checkMediana.setEnabled(False)
        self.dlg.labelAvis.setVisible(False)
        self.dlg.progressBar.setValue(0)
        self.dlg.labelRestriccio.setVisible(False)
        self.dlg.tabPersonalitzacio.setVisible(False)
        self.dlg.pushColor.setEnabled(False)
        self.dlg.pushColor.setStyleSheet("background-color: #707070")
        self.dlg.pushColor.setAutoFillBackground(True)
        self.dlg.minScale.setEnabled(False)
        self.dlg.maxScale.setEnabled(False)
        self.dlg.pushColorP.setEnabled(True)
        self.dlg.pushColorP.setStyleSheet("background-color: #707070")
        self.dlg.pushColorP.setAutoFillBackground(True)
        self.dlg.minScaleP.setEnabled(True)
        self.dlg.maxScaleP.setEnabled(True)
        textBox = "Selecciona una base de dades...\n"
        self.dlg.textEstat.setText(textBox)
        self.dlg.setEnabled(True)
    
    def estatFinalitzat(self):
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.pushInici.setEnabled(True)
        self.dlg.pushSortir.setEnabled(True)
        self.dlg.labelAvis.setVisible(True)
    
    def calculIdEntitat(self):
        global outputs

        ''' ID Entitat '''
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'idEntitat',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 1,
            'FORMULA': '\"id\"',
            'INPUT': entitatLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['IdEntitat'] = processing.run('qgis:fieldcalculator', alg_params)

    def castConsum(self):
        global outputs

        ''' Cast Consum '''
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'consum',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': '\"energia primària no renovable\"',
            'INPUT': habitatgesLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CastConsum'] = processing.run('qgis:fieldcalculator', alg_params)

    def castEmissions(self):
        global outputs

        ''' Cast Emissions '''
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'emissions',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': '\"emissions de co2\"',
            'INPUT': habitatgesLayer,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CastEmissions'] = processing.run('qgis:fieldcalculator', alg_params)

    def castm2(self):
        global outputs

        ''' Cast m2 '''
        if consum:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'm2',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': '\"metres_cadastre\"',
                'INPUT': outputs['CastConsum']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }

        if emissions:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'm2',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': '\"metres_cadastre\"',
                'INPUT': outputs['CastEmissions']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Castm2'] = processing.run('qgis:fieldcalculator', alg_params)
    
    def joinEntitatHabitatges(self):
        global outputs

        ''' Join Entitat - Habitatges '''
        if consum:
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'INPUT': outputs['IdEntitat']['OUTPUT'],
                'JOIN': outputs['Castm2']['OUTPUT'],
                'JOIN_FIELDS': ['id','referencia cadastral','metres_cadastre','qualificació de consum energia primaria no renovable','energia primària no renovable','consum','m2'],
                'METHOD': 0,
                'PREDICATE': [0],
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT                           
            }
        if emissions:
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'INPUT': outputs['IdEntitat']['OUTPUT'],
                'JOIN': outputs['Castm2']['OUTPUT'],
                'JOIN_FIELDS': ['id','referencia cadastral','metres_cadastre','qualificacio emissions de co2','emissions de co2','emissions','m2'],
                'METHOD': 0,
                'PREDICATE': [0],
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT                           
            }
        outputs['JoinEntitatHabitatges'] = processing.run('native:joinattributesbylocation', alg_params)

    def indexMITJANAhabIindexMEDIANAhab(self):
        global outputs

        ''' indexMITJANAhab i indexMEDIANAhab '''
        if consum:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'consum',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'emissions',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['IndexmitjanahabIIndexmedianahab'] = processing.run('qgis:statisticsbycategories', alg_params)

    def numsIindexMODAhab(self):
        global outputs

        ''' Nums i indexMODAhab '''
        if consum:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat','qualificació de consum energia primaria no renovable'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'consum',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat','qualificacio emissions de co2'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'emissions',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['NumsIIndexmodahab'] = processing.run('qgis:statisticsbycategories', alg_params)

    def calcularProducteCon(self):
        global outputs

        ''' producte_con '''
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'producte_con',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': '\"m2\" * \"consum\"',
            'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Producte_con'] = processing.run('qgis:fieldcalculator', alg_params)

    def calcularProducteEmi(self):
        global outputs

        ''' producte_emi '''
        alg_params = {
            'FIELD_LENGTH': 0,
            'FIELD_NAME': 'producte_emi',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 0,
            'FORMULA': '\"m2\" * \"emissions\"',
            'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Producte_emi'] = processing.run('qgis:fieldcalculator', alg_params)

    def estadistiquesm2(self):
        global outputs

        if consum:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat', 'qualificació de consum energia primaria no renovable'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'm2',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat', 'qualificacio emissions de co2'],
                'INPUT': outputs['JoinEntitatHabitatges']['OUTPUT'],
                'VALUES_FIELD_NAME':        'm2',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Estadistiquesm2'] = processing.run('qgis:statisticsbycategories', alg_params)

    def sumProducteConEmi(self):
        global outputs

        ''' sum_producte_con '''
        if consum:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat','qualificació de consum energia primaria no renovable'],
                'INPUT': outputs['Producte_con']['OUTPUT'],
                'VALUES_FIELD_NAME':        'producte_con',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Sum_producte_con'] = processing.run('qgis:statisticsbycategories', alg_params)
        if emissions:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat','qualificacio emissions de co2'],
                'INPUT': outputs['Producte_emi']['OUTPUT'],
                'VALUES_FIELD_NAME':        'producte_emi',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Sum_producte_emi'] = processing.run('qgis:statisticsbycategories', alg_params)

    def aggregateNumHab(self):
        global outputs
        if consum:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'A\', \"count\", 0)','length': 0,'name': 'NumA','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'B\', \"count\", 0)','length': 0,'name': 'NumB','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'C\', \"count\", 0)','length': 0,'name': 'NumC','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'D\', \"count\", 0)','length': 0,'name': 'NumD','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'E\', \"count\", 0)','length': 0,'name': 'NumE','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'F\', \"count\", 0)','length': 0,'name': 'NumF','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'G\', \"count\", 0)','length': 0,'name': 'NumG','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT' : outputs['NumsIIndexmodahab']['OUTPUT'], 
                'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'A\', \"count\", 0)','length': 0,'name': 'NumA','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'B\', \"count\", 0)','length': 0,'name': 'NumB','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'C\', \"count\", 0)','length': 0,'name': 'NumC','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'D\', \"count\", 0)','length': 0,'name': 'NumD','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'E\', \"count\", 0)','length': 0,'name': 'NumE','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'F\', \"count\", 0)','length': 0,'name': 'NumF','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'G\', \"count\", 0)','length': 0,'name': 'NumG','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT' : outputs['NumsIIndexmodahab']['OUTPUT'], 
                'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
            }

        outputs['AggregateNumHab'] = processing.run('qgis:aggregate', alg_params)
    
    def aggregateModaNumHab(self):
        global outputs
        if consum:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': '','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'maximum','delimiter': '','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},{'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificació de consum energia primaria no renovable\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'sum','delimiter': '','input': 'if(\"qualificació de consum energia primaria no renovable\" = if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificació de consum energia primaria no renovable\",\'\'), \"mean\", 0)','length': 0,'name': 'indexMODAhab','precision': 0,'type': 6}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT': outputs['NumsIIndexmodahab']['OUTPUT'],
                'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': '','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'maximum','delimiter': '','input': '\"count\"','length': 0,'name': 'MaxNum','precision': 0,'type': 2},{'aggregate': 'concatenate','delimiter': '','input': 'if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio emissions de co2\",\'\')','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'sum','delimiter': '','input': 'if(\"qualificacio emissions de co2\" = if(\"count\"=maximum(\"count\",\"idEntitat\"), \"qualificacio emissions de co2\",\'\'), \"mean\", 0)','length': 0,'name': 'indexMODAhab','precision': 0,'type': 6}], 
                'GROUP_BY' : '\"idEntitat\"', 
                'INPUT': outputs['NumsIIndexmodahab']['OUTPUT'],
                'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['aggregateModaNumHab'] = processing.run('qgis:aggregate', alg_params)

    def aggregateM2(self):
        if consum:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'A\', \"count\", 0)','length': 0,'name': 'm2A','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'B\', \"count\", 0)','length': 0,'name': 'm2B','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'C\', \"count\", 0)','length': 0,'name': 'm2C','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'D\', \"count\", 0)','length': 0,'name': 'm2D','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'E\', \"count\", 0)','length': 0,'name': 'm2E','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'F\', \"count\", 0)','length': 0,'name': 'm2F','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificació de consum energia primaria no renovable\" = \'G\', \"count\", 0)','length': 0,'name': 'm2G','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'Totalm2','precision': 0,'type': 2}], 
                'GROUP_BY': '\"idEntitat\"',
                'INPUT': outputs['Estadistiquesm2']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'A\', \"count\", 0)','length': 0,'name': 'm2A','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'B\', \"count\", 0)','length': 0,'name': 'm2B','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'C\', \"count\", 0)','length': 0,'name': 'm2C','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'D\', \"count\", 0)','length': 0,'name': 'm2D','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'E\', \"count\", 0)','length': 0,'name': 'm2E','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'F\', \"count\", 0)','length': 0,'name': 'm2F','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'if( \"qualificacio emissions de co2\" = \'G\', \"count\", 0)','length': 0,'name': 'm2G','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': '\"count\"','length': 0,'name': 'Totalm2','precision': 0,'type': 2}], 
                'GROUP_BY': '\"idEntitat\"',
                'INPUT': outputs['Estadistiquesm2']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['aggregateM2'] = processing.run('qgis:aggregate', alg_params)

    def joinEstadistiques(self):
        global outputs

        ''' Join Estadistiques '''
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY': [''],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['AggregateNumHab']['OUTPUT'],
            'INPUT_2': outputs['IndexmitjanahabIIndexmedianahab']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinEstadistiques'] = processing.run('native:joinattributestable', alg_params)


    def joinEstadistiques2(self):
        global outputs

        ''' Join Estadistiques '''
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY': [''],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['JoinEstadistiques']['OUTPUT'],
            'INPUT_2': outputs['aggregateModaNumHab']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinEstadistiques2'] = processing.run('native:joinattributestable', alg_params)


    def joinFinalNumHab(self):
        global outputs

        ''' Join Final '''
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY' : ['idEntitat','NumA','NumB','NumC','NumD','NumE','NumF','NumG','TotalEE','count','mean','median','MaxNum','QualifMaxFreq','indexMODAhab'],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['IdEntitat']['OUTPUT'],
            'INPUT_2': outputs['JoinEstadistiques2']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinFinalNumHab'] = processing.run('native:joinattributestable', alg_params)
    
    def cleanNumHab(self):
        global outputs
        global results

        ''' Clean NumHab per a ser la capa final '''
        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumA\"','length': 0,'name': 'NumA','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumB\"','length': 0,'name': 'NumB','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumC\"','length': 0,'name': 'NumC','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumD\"','length': 0,'name': 'NumD','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumE\"','length': 0,'name': 'NumE','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumF\"','length': 0,'name': 'NumF','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumG\"','length': 0,'name': 'NumG','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"count\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"mean\"','length': 0,'name': 'indexMITJANAhab','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"QualifMaxFreq\"','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'first_value','delimiter': ',','input': '\"median\"','length': 0,'name': 'indexMODAhab','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"median\"','length': 0,'name': 'indexMEDIANAhab','precision': 0,'type': 6}], 
            'GROUP_BY' : 'idEntitat', 
            'INPUT' : outputs['JoinFinalNumHab']['OUTPUT'], 
            'OUTPUT' : QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['CleanNumHab'] = processing.run('qgis:aggregate', alg_params)

    def sum_m2(self):
        global outputs

        ''' sum_m2 '''
        if consum:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat', 'qualificació de consum energia primaria no renovable'],
                'INPUT': outputs['Producte_con']['OUTPUT'],
                'VALUES_FIELD_NAME':        'm2',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'CATEGORIES_FIELD_NAME':    ['idEntitat', 'qualificacio emissions de co2'],
                'INPUT': outputs['Producte_emi']['OUTPUT'],
                'VALUES_FIELD_NAME':        'm2',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Sum_m2'] = processing.run('qgis:statisticsbycategories', alg_params)

    def cleanProducteConEmi(self):
        global outputs

        if consum:
            alg_params = {
                'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                'INPUT': outputs['Sum_producte_con']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Clean_producte_con'] = processing.run('qgis:deletecolumn', alg_params)
        if emissions:
            alg_params = {
                'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
                'INPUT': outputs['Sum_producte_emi']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Clean_producte_emi'] = processing.run('qgis:deletecolumn', alg_params)

    def cleanM2(self):
        global outputs

        ''' Clean m2 '''
        alg_params = {
            'COLUMN': ['unique','min','max','range','mean','median','stddev','minority','majority','q1','q3','iqr'],
            'INPUT': outputs['Sum_m2']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Clean_m2'] = processing.run('qgis:deletecolumn', alg_params)

    def sumM2Net(self):
        global outputs

        ''' sum_m2_net '''
        alg_params = {
            'FIELD': 'sum',
            'INPUT': outputs['Clean_m2']['OUTPUT'],
            'NEW_NAME': 'sum_m2',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Sum_m2_net'] = processing.run('qgis:renametablefield', alg_params)

    def m2_fin(self):
        global outputs

        ''' m2_fin '''
        if consum:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'seccio_qual',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 2,
                'FORMULA': ' concat(to_string(  \"idEntitat\" ) ,\'-\', \"qualificació de consum energia primaria no renovable\" )',
                'INPUT': outputs['Sum_m2_net']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'seccio_qual',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 2,
                'FORMULA': ' concat(to_string(  \"idEntitat\" ) ,\'-\', \"qualificacio emissions de co2\" )',
                'INPUT': outputs['Sum_m2_net']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['M2_fin'] = processing.run('qgis:fieldcalculator', alg_params)

    def sum_product_net(self):
        global outputs

        ''' sum_product_net '''
        if consum:
            alg_params = {
                'FIELD': 'sum',
                'INPUT': outputs['Clean_producte_con']['OUTPUT'],
                'NEW_NAME': 'sum_producte_con',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Sum_producte_con_net'] = processing.run('qgis:renametablefield', alg_params)
        if emissions:
            alg_params = {
                'FIELD': 'sum',
                'INPUT': outputs['Clean_producte_emi']['OUTPUT'],
                'NEW_NAME': 'sum_producte_emi',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Sum_producte_emi_net'] = processing.run('qgis:renametablefield', alg_params)

    def producte_conemi_fin(self):
        global outputs

        ''' producte_conemi_fin '''
        if consum:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'seccio_qual',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 2,
                'FORMULA': ' concat(to_string(  \"idEntitat\" ) ,\'-\', \"qualificació de consum energia primaria no renovable\" )',
                'INPUT': outputs['Sum_producte_con_net']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Producte_con_fin'] = processing.run('qgis:fieldcalculator', alg_params)
        if emissions:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'seccio_qual',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 2,
                'FORMULA': ' concat(to_string(  \"idEntitat\" ) ,\'-\', \"qualificacio emissions de co2\" )',
                'INPUT': outputs['Sum_producte_emi_net']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Producte_emi_fin'] = processing.run('qgis:fieldcalculator', alg_params)

    def unirCapes(self):
        global outputs

        ''' Unir capes '''
        if consum:
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'seccio_qual',
                'FIELDS_TO_COPY': ['sum_m2'],
                'FIELD_2': 'seccio_qual',
                'INPUT': outputs['Producte_con_fin']['OUTPUT'],
                'INPUT_2': outputs['M2_fin']['OUTPUT'],
                'METHOD': 0,
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'seccio_qual',
                'FIELDS_TO_COPY': ['sum_m2'],
                'FIELD_2': 'seccio_qual',
                'INPUT': outputs['Producte_emi_fin']['OUTPUT'],
                'INPUT_2': outputs['M2_fin']['OUTPUT'],
                'METHOD': 0,
                'PREFIX': '',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Capes_unides'] = processing.run('native:joinattributestable', alg_params)

    def modam2(self):
        global outputs

        ''' Moda '''
        if consum:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'moda',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': 'sum_producte_con/sum_m2',
                'INPUT': outputs['Capes_unides']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'moda',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': 'sum_producte_emi/sum_m2',
                'INPUT': outputs['Capes_unides']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Moda'] = processing.run('qgis:fieldcalculator', alg_params)

    def pre_mitjana(self):
        if consum:
            alg_params = {
                'AGGREGATES': [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'sum_producte_con','length': 0,'name': 'sum_producte_con','precision': 0,'type': 6},{'aggregate': 'sum','delimiter': ',','input': 'sum_m2','length': 0,'name': 'sum_m2','precision': 0,'type': 6}],
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['Moda']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'AGGREGATES': [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'sum','delimiter': ',','input': 'sum_producte_emi','length': 0,'name': 'sum_producte_emi','precision': 0,'type': 6},{'aggregate': 'sum','delimiter': ',','input': 'sum_m2','length': 0,'name': 'sum_m2','precision': 0,'type': 6}],
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['Moda']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Pre_mitjana'] = processing.run('qgis:aggregate', alg_params)

    def filtrarModa(self):
        global outputs

        if consum:
            alg_params = {
                'AGGREGATES': [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'count','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"moda\"','length': 0,'name': 'indexMODAm2','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"qualificació de consum energia primaria no renovable\"','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'first_value','delimiter': ',','input': '\"sum_producte_con\"','length': 0,'name': 'sum_producte_con','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"sum_m2\"','length': 0,'name': 'sum_m2','precision': 0,'type': 6}],
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['Moda']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Filtrar_moda'] = processing.run('native:aggregate', alg_params)
        if emissions:
            alg_params = {
                'AGGREGATES': [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'maximum','delimiter': ',','input': '\"count\"','length': 0,'name': 'count','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"moda\"','length': 0,'name': 'indexMODAm2','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"qualificacio emissions de co2\"','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'first_value','delimiter': ',','input': '\"sum_producte_emi\"','length': 0,'name': 'sum_producte_emi','precision': 0,'type': 6},{'aggregate': 'first_value','delimiter': ',','input': '\"sum_m2\"','length': 0,'name': 'sum_m2','precision': 0,'type': 6}],
                'GROUP_BY': 'idEntitat',
                'INPUT': outputs['Moda']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Filtrar_moda'] = processing.run('native:aggregate', alg_params)

    def ordenarModa(self):
        global outputs

        alg_params = {
            'ASCENDING': True,
            'EXPRESSION': '\"idEntitat\"',
            'INPUT': outputs['Filtrar_moda']['OUTPUT'],
            'NULLS_FIRST': False,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Ordenar_moda'] = processing.run('native:orderbyexpression', alg_params)

    def mitjanam2(self):
        global outputs

        if consum:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'indexMITJANAm2',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': 'sum_producte_con/sum_m2',
                'INPUT': outputs['Pre_mitjana']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        if emissions:
            alg_params = {
                'FIELD_LENGTH': 0,
                'FIELD_NAME': 'indexMITJANAm2',
                'FIELD_PRECISION': 0,
                'FIELD_TYPE': 0,
                'FORMULA': 'sum_producte_emi/sum_m2',
                'INPUT': outputs['Pre_mitjana']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        outputs['Mitjanam2'] = processing.run('qgis:fieldcalculator', alg_params)

    def unirAtributos(self):
        global outputs

        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY': ['indexMITJANAm2'],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['Ordenar_moda']['OUTPUT'],
            'INPUT_2': outputs['Mitjanam2']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Unir_atributos'] = processing.run('native:joinattributestable', alg_params)
    
    def unirAtributos2(self):
        global outputs
        global results

        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY': [],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['Unir_atributos']['OUTPUT'],
            'INPUT_2': outputs['aggregateM2']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['Unir_atributos2'] = processing.run('native:joinattributestable', alg_params)
    
    def joinFinalm2(self):
        global outputs

        ''' Join Final '''
        alg_params = {
            'DISCARD_NONMATCHING': False,
            'FIELD': 'idEntitat',
            'FIELDS_TO_COPY': [''],
            'FIELD_2': 'idEntitat',
            'INPUT': outputs['IdEntitat']['OUTPUT'],
            'INPUT_2': outputs['Unir_atributos2']['OUTPUT'],
            'METHOD': 1,
            'PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['JoinFinalm2'] = processing.run('native:joinattributestable', alg_params)

    
    def cleanDefinitiuNumHab(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumA\"','length': 0,'name': 'NumA','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumB\"','length': 0,'name': 'NumB','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumC\"','length': 0,'name': 'NumC','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumD\"','length': 0,'name': 'NumD','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumE\"','length': 0,'name': 'NumE','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumF\"','length': 0,'name': 'NumF','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"NumG\"','length': 0,'name': 'NumG','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"TotalEE\"','length': 0,'name': 'TotalEE','precision': 0,'type': 2}], 
            'GROUP_BY' : '\"idEntitat\"', 
            'INPUT' : outputs['CleanNumHab']['OUTPUT'], 
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuNumHab'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuNumHab']['OUTPUT']

    def cleanDefinitiuMitjanaNum(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"indexMITJANAhab\"','length': 0,'name': 'indexMITJANAhab','precision': 0,'type': 6}],
            'GROUP_BY' : '\"idEntitat\"',
            'INPUT' : outputs['CleanNumHab']['OUTPUT'],
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuMitjanaNum'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuMitjanaNum']['OUTPUT']
    
    def cleanDefinitiuModaNum(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"QualifMaxFreq\"','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'first_value','delimiter': ',','input': '\"indexMODAhab\"','length': 0,'name': 'indexMODAhab','precision': 0,'type': 6}],
            'GROUP_BY' : '\"idEntitat\"',
            'INPUT' : outputs['CleanNumHab']['OUTPUT'],
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuModaNum'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuModaNum']['OUTPUT']
        
    def cleanDefinitiuMedianaNum(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"indexMEDIANAhab\"','length': 0,'name': 'indexMEDIANAhab','precision': 0,'type': 6}],
            'GROUP_BY' : '\"idEntitat\"',
            'INPUT' : outputs['CleanNumHab']['OUTPUT'],
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuMedianaNum'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuMedianaNum']['OUTPUT']

    def cleanDefinitium2(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2A\"','length': 0,'name': 'm2A','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2B\"','length': 0,'name': 'm2B','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2C\"','length': 0,'name': 'm2C','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2D\"','length': 0,'name': 'm2D','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2E\"','length': 0,'name': 'm2E','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2F\"','length': 0,'name': 'm2F','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"m2G\"','length': 0,'name': 'm2G','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"Totalm2\"','length': 0,'name': 'Totalm2','precision': 0,'type': 2}], 
            'GROUP_BY' : '\"idEntitat\"', 
            'INPUT' : outputs['JoinFinalm2']['OUTPUT'], 
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitium2'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitium2']['OUTPUT']
    
    def cleanDefinitiuMitjanam2(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"indexMITJANAm2\"','length': 0,'name': 'indexMITJANAm2','precision': 0,'type': 6}],
            'GROUP_BY' : '\"idEntitat\"',
            'INPUT' : outputs['JoinFinalm2']['OUTPUT'],
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuMitjanam2'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuMitjanam2']['OUTPUT']
    
    def cleanDefinitiuModam2(self):
        global outputs
        global results

        alg_params = {
            'AGGREGATES' : [{'aggregate': 'first_value','delimiter': ',','input': '\"idEntitat\"','length': 0,'name': 'idEntitat','precision': 0,'type': 2},{'aggregate': 'first_value','delimiter': ',','input': '\"QualifMaxFreq\"','length': 0,'name': 'QualifMaxFreq','precision': 0,'type': 10},{'aggregate': 'first_value','delimiter': ',','input': '\"indexMODAm2\"','length': 0,'name': 'indexMODAm2','precision': 0,'type': 6}],
            'GROUP_BY' : '\"idEntitat\"',
            'INPUT' : outputs['JoinFinalm2']['OUTPUT'],
            'OUTPUT' : 'TEMPORARY_OUTPUT'
        }
        outputs['CleanDefinitiuModam2'] = processing.run('qgis:aggregate', alg_params)
        return outputs['CleanDefinitiuModam2']['OUTPUT']

    def scroll_text(self):
        self.dlg.textEstat.moveCursor(QTextCursor.End)
    
    def updateProgress(self, progress):
        self.dlg.progressBar.setValue(progress)
        QApplication.processEvents()
        
    def barraEstat_noConnectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "No connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
        QApplication.processEvents()
        
    def barraEstat_connectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
    def barraEstat_connectant(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectant..."'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
        self.dlg.lblEstatConn.setText('Connectant...')
        QApplication.processEvents()

    def on_click_Sortir(self):
        if cur != None and conn != None:
            cur.close()
            conn.close()
        self.estatInicial()
        self.dlg.close()

    def on_click_Inici(self):
        global cur
        global conn
        global textBox
        global nomBD1
        global password1
        global host1
        global user1
        global port1
        global schema1
        global uri
        global color
        global minimumValue
        global maximumValue
        global estandar
        global personalitzat

        global habitatges
        global habitatgesLayer
        global entitat
        global entitatLayer
        global entitatLayerJoined
        global entitatLayerResumNumHabit
        global entitatLayerResumm2
        global entitatLayerResumMitjana
        global entitatLayerResumModa
        global entitatLayerResumMediana
        global fitxer
        global ranges
        global colors
        global symbols

        global outputs
        global parameters

        fitxer = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")

        total_start_time = time.time()

        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1, port1, nomBD1, user1, password1)
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a la connexio")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        if entitat == llistaEntitats[0] or entitat == None:
            print("No s'ha seleccionat cap entitat amb la que treballar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap entitat amb la que treballar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked() and not self.dlg.checkMitjana.isChecked() and not self.dlg.checkModa.isChecked() and not self.dlg.checkMediana.isChecked()):
            print ("No s'ha seleccionat cap càlcul que realitzar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap càlcul que realitzar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.consumButton.isChecked() and not self.dlg.emissionsButton.isChecked()):
            print ("No s'ha seleccionat ni consum ni emissions")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat ni consum ni emissions")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        self.updateProgress(10)

        self.dlg.setEnabled(False)
        self.dlg.groupBD.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.groupEntitats.setEnabled(False)
        textBox = f"INICIANT EL PROCÉS...\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()

        self.calculIdEntitat()

        if estandar:
            color = QColor("#707070")
            minimumValue = self.dlg.minScale.value()
            maximumValue = self.dlg.maxScale.value()
        if personalitzat:
            minimumValue = self.dlg.minScale.value()
            maximumValue = self.dlg.maxScale.value()

        if self.dlg.checkNumHabit.isChecked():

            if consum:
                self.castConsum()
                self.castm2() 
                self.joinEntitatHabitatges()
            if emissions:
                self.castEmissions()
                self.castm2()
                self.joinEntitatHabitatges()
            
            self.indexMITJANAhabIindexMEDIANAhab()
            self.numsIindexMODAhab()
            self.aggregateNumHab()
            self.aggregateModaNumHab()
            self.joinEstadistiques()
            self.joinEstadistiques2()
            self.joinFinalNumHab()
            self.cleanNumHab()

            capanumhab = self.cleanDefinitiuNumHab()
            capamitjananum = self.cleanDefinitiuMitjanaNum()
            capamodanum = self.cleanDefinitiuModaNum()
            capamediananum = self.cleanDefinitiuMedianaNum()

            self.updateProgress(20)

            if consum:
                entitatLayerResumNumHabit = QgsProject.instance().addMapLayer(capanumhab)
                entitatLayerResumNumHabit.setName(f"Consum de {entitat.upper()} amb nombre d'habitatges segons categoria")

                if self.dlg.checkMitjana.isChecked() and not self.dlg.checkm2.isChecked():
                    entitatLayerResumMitjana = QgsProject.instance().addMapLayer(capamitjananum)
                    entitatLayerResumMitjana.setName(f"Mitjana de consum de {entitat.upper()}")

                if self.dlg.checkModa.isChecked() and not self.dlg.checkm2.isChecked():
                    entitatLayerResumModa = QgsProject.instance().addMapLayer(capamodanum)
                    entitatLayerResumModa.setName(f"Moda de consum de {entitat.upper()}")

                if self.dlg.checkMediana.isChecked():
                    entitatLayerResumMediana = QgsProject.instance().addMapLayer(capamediananum)
                    entitatLayerResumMediana.setName(f"Mediana de consum de {entitat.upper()}")
            if emissions:
                entitatLayerResumNumHabit = QgsProject.instance().addMapLayer(capanumhab)
                entitatLayerResumNumHabit.setName(f"Emissions de {entitat.upper()} amb nombre d'habitatges segons categoria")

                if self.dlg.checkMitjana.isChecked() and not self.dlg.checkm2.isChecked():
                    entitatLayerResumMitjana = QgsProject.instance().addMapLayer(capamitjananum)
                    entitatLayerResumMitjana.setName(f"Mitjana d'emissions de {entitat.upper()}")

                if self.dlg.checkModa.isChecked() and not self.dlg.checkm2.isChecked():
                    entitatLayerResumModa = QgsProject.instance().addMapLayer(capamodanum)
                    entitatLayerResumModa.setName(f"Moda d'emissions de {entitat.upper()}")

                if self.dlg.checkMediana.isChecked():
                    entitatLayerResumMediana = QgsProject.instance().addMapLayer(capamediananum)
                    entitatLayerResumMediana.setName(f"Mediana d'emissions de {entitat.upper()}")
            
            self.updateProgress(30)

            # Diagrames NumHabit

            diagramNumHabit = QgsPieDiagram()
            diagramNumHabitSettings = QgsDiagramSettings()
            diagramNumHabitSettings.categoryColors = colors.values()
            diagramNumHabitSettings.categoryAttributes = ['NumA', 'NumB', 'NumC', 'NumD', 'NumE', 'NumF', 'NumG']
            diagramNumHabitSettings.scaleByArea = False
            diagramNumHabitSettings.scaleBasedVisibility = True
            diagramNumHabitSettings.size = QSizeF(15, 15)
            diagramNumHabitSettings.minimumScale = minimumValue
            diagramNumHabitSettings.maximumScale = maximumValue
            diagramNumHabitSettings.categoryLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
            diagramNumHabitSettings.enabled = True

            entitatLayerResumNumHabit.renderer().symbol().setColor(color)

            diagramNumHabitRenderer = QgsSingleCategoryDiagramRenderer()
            diagramNumHabitRenderer.setDiagram(diagramNumHabit)
            diagramNumHabitRenderer.setDiagramSettings(diagramNumHabitSettings)

            entitatLayerResumNumHabit.setDiagramRenderer(diagramNumHabitRenderer)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibility = QgsProperty()
            propertyVisibility.setExpressionString("""CASE WHEN "TotalEE" = 0 THEN False WHEN "TotalEE" IS NULL THEN False ELSE True END """)
            propertyVisibility.setActive(True)

            propertyCollection = QgsPropertyCollection('diagram_properties')
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibility)

            diagramNumHabitLayerSettings = QgsDiagramLayerSettings()
            diagramNumHabitLayerSettings.setDataDefinedProperties(propertyCollection)

            entitatLayerResumNumHabit.setDiagramLayerSettings(diagramNumHabitLayerSettings)

            single_symbol_renderer = entitatLayerResumNumHabit.renderer().clone()
            symbol = single_symbol_renderer.symbol()
            symbol_layer = QgsSimpleLineSymbolLayer()
            symbol_layer.setWidth(0)
            entitatLayerResumNumHabit.setRenderer(single_symbol_renderer)

            entitatLayerResumNumHabit.triggerRepaint()
            QApplication.processEvents()

            self.updateProgress(35)

            # Labels Mitjana

            if self.dlg.checkMitjana.isChecked() and not self.dlg.checkm2.isChecked():
                labelMitjana = QgsPalLayerSettings()
                labelMitjana.enabled = True

                labelMitjana.fieldName = """
                CASE
                    WHEN "indexMITJANAhab" IS NOT NULL AND "indexMITJANAhab" > 0 THEN '<div><b><font color="black">' || format_number("indexMITJANAhab", 1) || '</font></b></div>'
                    ELSE ''
                END
                """
                labelMitjana.isExpression = True
                labelMitjana.placement = QgsPalLayerSettings.AroundPoint

                text_format = QgsTextFormat()
                #text_format.setAllowHtmlFormatting(True)

                background_format = QgsTextBackgroundSettings()
                background_format = QgsTextBackgroundSettings()
                background_format.setEnabled(True)
                background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
                background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
                background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setSize(QSizeF(3, 3))
                background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setRadii(QSizeF(3, 3))
                background_format.setFillColor(QColor("#ffffff"))
                background_format.setStrokeColor(QColor("#808080"))
                background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setStrokeWidth(1)

                text_format.setBackground(background_format)

                symbology = QgsGraduatedSymbolRenderer("indexMITJANAhab", ranges.values())

                symbolA = QgsFillSymbol()
                symbolA.setColor(colors["colorA"])
                symbolB = QgsFillSymbol()
                symbolB.setColor(colors["colorB"])
                symbolC = QgsFillSymbol()
                symbolC.setColor(colors["colorC"])
                symbolD = QgsFillSymbol()
                symbolD.setColor(colors["colorD"])
                symbolE = QgsFillSymbol()
                symbolE.setColor(colors["colorE"])
                symbolF = QgsFillSymbol()
                symbolF.setColor(colors["colorF"])
                symbolG = QgsFillSymbol()
                symbolG.setColor(colors["colorG"])

                symbology.updateRangeSymbol(0, symbolA)
                symbology.updateRangeSymbol(1, symbolB)
                symbology.updateRangeSymbol(2, symbolC)
                symbology.updateRangeSymbol(3, symbolD)
                symbology.updateRangeSymbol(4, symbolE)
                symbology.updateRangeSymbol(5, symbolF)
                symbology.updateRangeSymbol(6, symbolG)

                labelMitjana.setFormat(text_format)

                propertyx = QgsProperty()
                propertyx.setExpressionString("x(centroid($geometry))")
                propertyx.setActive(True)

                propertyy = QgsProperty()
                propertyy.setExpressionString("y(centroid($geometry))")
                propertyy.setActive(True)

                propertyCollection = QgsPropertyCollection("Coordenades")
                propertyCollection.setProperty(9, propertyx)
                propertyCollection.setProperty(10, propertyy)

                labelMitjana.setDataDefinedProperties(propertyCollection)

                labelMitjana.minimumScale = minimumValue
                labelMitjana.maximumScale = maximumValue
                
                labelMitjana.scaleVisibility = True

                entitatLayerResumMitjana.setLabeling(QgsVectorLayerSimpleLabeling(labelMitjana))
                entitatLayerResumMitjana.setLabelsEnabled(True)
                entitatLayerResumMitjana.setRenderer(symbology)
                entitatLayerResumMitjana.triggerRepaint()
                QgsProject.instance().addMapLayer(entitatLayerResumMitjana)
                QApplication.processEvents()

                self.updateProgress(40)
            
            # Labels Moda

            if self.dlg.checkModa.isChecked() and not self.dlg.checkm2.isChecked():
                labelModa = QgsPalLayerSettings()
                labelModa.enabled = True

                labelModa.fieldName = """
                CASE
                    WHEN "indexMODAhab" IS NOT NULL AND "indexMODAhab" > 0 THEN '<div><b><font color="black">' || format_number("indexMODAhab", 1) || '</font></b></div>'
                    ELSE ''
                END
                """

                labelModa.isExpression = True
                labelModa.placement = QgsPalLayerSettings.AroundPoint

                text_format = QgsTextFormat()
                #text_format.setAllowHtmlFormatting(True)

                background_format = QgsTextBackgroundSettings()
                background_format.setEnabled(True)
                background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
                background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
                background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setSize(QSizeF(3, 3))
                background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setRadii(QSizeF(3, 3))
                background_format.setFillColor(QColor("#ffffff"))
                background_format.setStrokeColor(QColor("#808080"))
                background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setStrokeWidth(1)

                text_format.setBackground(background_format)

                symbology = QgsCategorizedSymbolRenderer()
                symbology.setClassAttribute("QualifMaxFreq")

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (KWh/m²any)"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorA"]))
                symbology.addCategory(QgsRendererCategory("A", symbol, "A"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorB"]))
                symbology.addCategory(QgsRendererCategory("B", symbol, "B"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorC"]))
                symbology.addCategory(QgsRendererCategory("C", symbol, "C"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorD"]))
                symbology.addCategory(QgsRendererCategory("D", symbol, "D"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorE"]))
                symbology.addCategory(QgsRendererCategory("E", symbol, "E"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorF"]))
                symbology.addCategory(QgsRendererCategory("F", symbol, "F"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorG"]))
                symbology.addCategory(QgsRendererCategory("G", symbol, "G"))

                labelModa.setFormat(text_format)

                propertyx = QgsProperty()
                propertyx.setExpressionString("x(centroid($geometry))")
                propertyx.setActive(True)

                propertyy = QgsProperty()
                propertyy.setExpressionString("y(centroid($geometry))")
                propertyy.setActive(True)

                propertyCollection = QgsPropertyCollection("Coordenades")
                propertyCollection.setProperty(9, propertyx)
                propertyCollection.setProperty(10, propertyy)

                labelModa.setDataDefinedProperties(propertyCollection)

                labelModa.minimumScale = minimumValue
                labelModa.maximumScale = maximumValue

                labelModa.scaleVisibility = True

                entitatLayerResumModa.setLabeling(QgsVectorLayerSimpleLabeling(labelModa))
                entitatLayerResumModa.setLabelsEnabled(True)
                entitatLayerResumModa.setRenderer(symbology)
                entitatLayerResumModa.triggerRepaint()
                QgsProject.instance().addMapLayer(entitatLayerResumModa)
                QApplication.processEvents()

                self.updateProgress(45)

            # Labels Mediana

            if self.dlg.checkMediana.isChecked():
                labelMediana = QgsPalLayerSettings()
                labelMediana.enabled = True
                labelMediana.fieldName = """
                CASE
                    WHEN "indexMEDIANAhab" IS NOT NULL AND "indexMEDIANAhab" > 0 THEN '<div><b><font color="black">' || format_number("indexMEDIANAhab", 1) || '</font></b></div>'
                    ELSE ''
                END
                """

                labelMediana.isExpression = True
                labelMediana.placement = QgsPalLayerSettings.AroundPoint

                text_format = QgsTextFormat()
                #text_format.setAllowHtmlFormatting(True)

                background_format = QgsTextBackgroundSettings()
                background_format.setEnabled(True)
                background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
                background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
                background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setSize(QSizeF(3, 3))
                background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setRadii(QSizeF(3, 3))
                background_format.setFillColor(QColor("#ffffff"))
                background_format.setStrokeColor(QColor("#808080"))
                background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setStrokeWidth(1)

                text_format.setBackground(background_format)

                symbology = QgsGraduatedSymbolRenderer("indexMEDIANAhab", ranges.values())

                symbolA = QgsFillSymbol()
                symbolA.setColor(colors["colorA"])
                symbolB = QgsFillSymbol()
                symbolB.setColor(colors["colorB"])
                symbolC = QgsFillSymbol()
                symbolC.setColor(colors["colorC"])
                symbolD = QgsFillSymbol()
                symbolD.setColor(colors["colorD"])
                symbolE = QgsFillSymbol()
                symbolE.setColor(colors["colorE"])
                symbolF = QgsFillSymbol()
                symbolF.setColor(colors["colorF"])
                symbolG = QgsFillSymbol()
                symbolG.setColor(colors["colorG"])

                symbology.updateRangeSymbol(0, symbolA)
                symbology.updateRangeSymbol(1, symbolB)
                symbology.updateRangeSymbol(2, symbolC)
                symbology.updateRangeSymbol(3, symbolD)
                symbology.updateRangeSymbol(4, symbolE)
                symbology.updateRangeSymbol(5, symbolF)
                symbology.updateRangeSymbol(6, symbolG)

                labelMediana.setFormat(text_format)

                propertyx = QgsProperty()
                propertyx.setExpressionString("x(centroid($geometry))")
                propertyx.setActive(True)

                propertyy = QgsProperty()
                propertyy.setExpressionString("y(centroid($geometry))")
                propertyy.setActive(True)

                propertyCollection = QgsPropertyCollection("Coordenades")
                propertyCollection.setProperty(9, propertyx)
                propertyCollection.setProperty(10, propertyy)

                labelMediana.setDataDefinedProperties(propertyCollection)

                labelMediana.minimumScale = minimumValue
                labelMediana.maximumScale = maximumValue
                
                labelMediana.scaleVisibility = True

                entitatLayerResumMediana.setLabeling(QgsVectorLayerSimpleLabeling(labelMediana))
                entitatLayerResumMediana.setLabelsEnabled(True)
                entitatLayerResumMediana.setRenderer(symbology)
                entitatLayerResumMediana.triggerRepaint()
                QgsProject.instance().addMapLayer(entitatLayerResumMediana)
                QApplication.processEvents()

                self.updateProgress(50)

        ''' **********  DIAGRAMES m2 **********  '''
        
        if self.dlg.checkm2.isChecked():

            if consum:
                self.castConsum()
                self.castm2()
                self.joinEntitatHabitatges()
                self.calcularProducteCon()
            if emissions:
                self.castEmissions()
                self.castm2()
                self.joinEntitatHabitatges()
                self.calcularProducteEmi()

            self.estadistiquesm2()
            
            self.sumProducteConEmi()
            self.sum_m2()

            self.cleanProducteConEmi()
            self.cleanM2()

            self.sum_product_net()
            self.sumM2Net()

            self.producte_conemi_fin()
            self.m2_fin()

            self.unirCapes()

            self.modam2()

            self.filtrarModa()
            self.pre_mitjana()

            self.ordenarModa()
            self.mitjanam2()

            self.aggregateM2()

            self.unirAtributos()
            self.unirAtributos2()

            self.joinFinalm2()

            caparesm2 = self.cleanDefinitium2()
            caparesmitjanam2 = self.cleanDefinitiuMitjanam2()
            caparesmodam2 = self.cleanDefinitiuModam2()

            self.updateProgress(60)
            
            if consum:
                entitatLayerResumm2 = QgsProject.instance().addMapLayer(caparesm2)
                entitatLayerResumm2.setName(f"Consum de {entitat.upper()} amb metres quadrats segons categoria")

                if self.dlg.checkMitjana.isChecked():
                    entitatLayerResumMitjana = QgsProject.instance().addMapLayer(caparesmitjanam2)
                    entitatLayerResumMitjana.setName(f"Mitjana de consum de {entitat.upper()}")

                if self.dlg.checkModa.isChecked():
                    entitatLayerResumModa = QgsProject.instance().addMapLayer(caparesmodam2)
                    entitatLayerResumModa.setName(f"Moda de consum de {entitat.upper()}")
            
            if emissions:
                entitatLayerResumm2 = QgsProject.instance().addMapLayer(caparesm2)
                entitatLayerResumm2.setName(f"Emissions de {entitat.upper()} amb nombre d'habitatges segons categoria")

                if self.dlg.checkMitjana.isChecked():
                    entitatLayerResumMitjana = QgsProject.instance().addMapLayer(caparesmitjanam2)
                    entitatLayerResumMitjana.setName(f"Mitjana d'emissions de {entitat.upper()}")

                if self.dlg.checkModa.isChecked():
                    entitatLayerResumModa = QgsProject.instance().addMapLayer(caparesmodam2)
                    entitatLayerResumModa.setName(f"Moda d'emissions de {entitat.upper()}")

            diagramm2 = QgsPieDiagram()
            diagramm2Settings = QgsDiagramSettings()
            diagramm2Settings.categoryColors = colors.values()
            diagramm2Settings.categoryAttributes = ['m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G']
            diagramm2Settings.scaleByArea = False
            diagramm2Settings.scaleBasedVisibility = True
            diagramm2Settings.size = QSizeF(15, 15)
            diagramm2Settings.minimumScale = minimumValue
            diagramm2Settings.maximumScale = maximumValue
            diagramm2Settings.categoryLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
            diagramm2Settings.enabled = True

            entitatLayerResumm2.renderer().symbol().setColor(color)

            diagramm2Renderer = QgsSingleCategoryDiagramRenderer()
            diagramm2Renderer.setDiagram(diagramm2)
            diagramm2Renderer.setDiagramSettings(diagramm2Settings)

            entitatLayerResumm2.setDiagramRenderer(diagramm2Renderer)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibility = QgsProperty()
            propertyVisibility.setExpressionString("""CASE WHEN "Totalm2" = 0 THEN False WHEN "Totalm2" IS NULL THEN False ELSE True END """)
            propertyVisibility.setActive(True)

            propertyCollection = QgsPropertyCollection('diagram_properties')
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibility)

            diagramm2LayerSettings = QgsDiagramLayerSettings()
            diagramm2LayerSettings.setDataDefinedProperties(propertyCollection)

            entitatLayerResumm2.setDiagramLayerSettings(diagramm2LayerSettings)

            single_symbol_renderer = entitatLayerResumm2.renderer().clone()
            symbol = single_symbol_renderer.symbol()
            symbol_layer = QgsSimpleLineSymbolLayer()
            symbol_layer.setWidth(0)
            entitatLayerResumm2.setRenderer(single_symbol_renderer)

            entitatLayerResumm2.triggerRepaint()
            QApplication.processEvents()

            self.updateProgress(70)

            # Labels Mitjana

            if self.dlg.checkMitjana.isChecked():
                labelMitjana = QgsPalLayerSettings()
                labelMitjana.enabled = True

                labelMitjana.fieldName = """
                CASE
                    WHEN "indexMITJANAm2" IS NOT NULL AND "indexMITJANAm2" > 0 THEN '<div><b><font color="black">' || format_number("indexMITJANAm2", 1) || '</font></b></div>'
                    ELSE ''
                END
                """
                labelMitjana.isExpression = True
                labelMitjana.placement = QgsPalLayerSettings.AroundPoint

                text_format = QgsTextFormat()
                #text_format.setAllowHtmlFormatting(True)

                background_format = QgsTextBackgroundSettings()
                background_format = QgsTextBackgroundSettings()
                background_format.setEnabled(True)
                background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
                background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
                background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setSize(QSizeF(3, 3))
                background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setRadii(QSizeF(3, 3))
                background_format.setFillColor(QColor("#ffffff"))
                background_format.setStrokeColor(QColor("#808080"))
                background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setStrokeWidth(1)

                text_format.setBackground(background_format)

                symbology = QgsGraduatedSymbolRenderer("indexMITJANAm2", ranges.values())

                symbolA = QgsFillSymbol()
                symbolA.setColor(colors["colorA"])
                symbolB = QgsFillSymbol()
                symbolB.setColor(colors["colorB"])
                symbolC = QgsFillSymbol()
                symbolC.setColor(colors["colorC"])
                symbolD = QgsFillSymbol()
                symbolD.setColor(colors["colorD"])
                symbolE = QgsFillSymbol()
                symbolE.setColor(colors["colorE"])
                symbolF = QgsFillSymbol()
                symbolF.setColor(colors["colorF"])
                symbolG = QgsFillSymbol()
                symbolG.setColor(colors["colorG"])

                symbology.updateRangeSymbol(0, symbolA)
                symbology.updateRangeSymbol(1, symbolB)
                symbology.updateRangeSymbol(2, symbolC)
                symbology.updateRangeSymbol(3, symbolD)
                symbology.updateRangeSymbol(4, symbolE)
                symbology.updateRangeSymbol(5, symbolF)
                symbology.updateRangeSymbol(6, symbolG)

                labelMitjana.setFormat(text_format)

                propertyx = QgsProperty()
                propertyx.setExpressionString("x(centroid($geometry))")
                propertyx.setActive(True)

                propertyy = QgsProperty()
                propertyy.setExpressionString("y(centroid($geometry))")
                propertyy.setActive(True)

                propertyCollection = QgsPropertyCollection("Coordenades")
                propertyCollection.setProperty(9, propertyx)
                propertyCollection.setProperty(10, propertyy)

                labelMitjana.setDataDefinedProperties(propertyCollection)

                labelMitjana.minimumScale = minimumValue
                labelMitjana.maximumScale = maximumValue
                
                labelMitjana.scaleVisibility = True

                entitatLayerResumMitjana.setLabeling(QgsVectorLayerSimpleLabeling(labelMitjana))
                entitatLayerResumMitjana.setLabelsEnabled(True)
                entitatLayerResumMitjana.setRenderer(symbology)
                entitatLayerResumMitjana.triggerRepaint()
                QgsProject.instance().addMapLayer(entitatLayerResumMitjana)
                QApplication.processEvents()

                self.updateProgress(80)
            
            # Labels Moda
            if self.dlg.checkModa.isChecked():
                labelModa = QgsPalLayerSettings()
                labelModa.enabled = True

                labelModa.fieldName = """
                CASE
                    WHEN "indexMODAm2" IS NOT NULL AND "indexMODAm2" > 0 THEN '<div><b><font color="black">' || format_number("indexMODAm2", 1) || '</font></b></div>'
                    ELSE ''
                END
                """

                labelModa.isExpression = True
                labelModa.placement = QgsPalLayerSettings.AroundPoint

                text_format = QgsTextFormat()
                #text_format.setAllowHtmlFormatting(True)

                background_format = QgsTextBackgroundSettings()
                background_format.setEnabled(True)
                background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
                background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
                background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setSize(QSizeF(3, 3))
                background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setRadii(QSizeF(3, 3))
                background_format.setFillColor(QColor("#ffffff"))
                background_format.setStrokeColor(QColor("#808080"))
                background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
                background_format.setStrokeWidth(1)

                text_format.setBackground(background_format)

                symbology = QgsCategorizedSymbolRenderer()
                symbology.setClassAttribute("QualifMaxFreq")

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (KWh/m²any)"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorA"]))
                symbology.addCategory(QgsRendererCategory("A", symbol, "A"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorB"]))
                symbology.addCategory(QgsRendererCategory("B", symbol, "B"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorC"]))
                symbology.addCategory(QgsRendererCategory("C", symbol, "C"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorD"]))
                symbology.addCategory(QgsRendererCategory("D", symbol, "D"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorE"]))
                symbology.addCategory(QgsRendererCategory("E", symbol, "E"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorF"]))
                symbology.addCategory(QgsRendererCategory("F", symbol, "F"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorG"]))
                symbology.addCategory(QgsRendererCategory("G", symbol, "G"))

                labelModa.setFormat(text_format)

                propertyx = QgsProperty()
                propertyx.setExpressionString("x(centroid($geometry))")
                propertyx.setActive(True)

                propertyy = QgsProperty()
                propertyy.setExpressionString("y(centroid($geometry))")
                propertyy.setActive(True)

                propertyCollection = QgsPropertyCollection("Coordenades")
                propertyCollection.setProperty(9, propertyx)
                propertyCollection.setProperty(10, propertyy)

                labelModa.setDataDefinedProperties(propertyCollection)

                labelModa.minimumScale = minimumValue
                labelModa.maximumScale = maximumValue

                labelModa.scaleVisibility = True

                entitatLayerResumModa.setLabeling(QgsVectorLayerSimpleLabeling(labelModa))
                entitatLayerResumModa.setLabelsEnabled(True)
                entitatLayerResumModa.setRenderer(symbology)
                entitatLayerResumModa.triggerRepaint()
                QgsProject.instance().addMapLayer(entitatLayerResumModa)
                QApplication.processEvents()

        self.updateProgress(90)
        textBox += f"PROCÉS FINALITZAT!\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.dlg.setEnabled(True)
        self.dlg.groupBD.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.groupEntitats.setEnabled(True)
        self.updateProgress(100)
        self.estatFinalitzat()
        total_finish_time = time.time()
        print(f"Temps total de procés: {round(total_finish_time - total_start_time)} segons")
        QMessageBox.information(None, "Procés finalitzat", f"El procés per a l'entitat {entitat} ha finalitzat.", QMessageBox.Ok)
        QApplication.processEvents()

    def populateComboBox(self, combo, list, predef, sort):
        """Procediment per omplir el combo especificat amb la llista subministrada"""
        combo.blockSignals(True)
        combo.clear()
        model = QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.estatInicial()
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboBD, conn, 'Selecciona connexió', True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
