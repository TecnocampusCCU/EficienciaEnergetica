# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EficEnerg
                                 A QGIS plugin
 efic energ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Miquel Rodriguez
        email                : mrodriguezj@edu.tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   Per implementar encara [TODO] :                                       *
 *   - Al finalitzar tot, escriure un manual d'usuari del plugin.          *
 *                                                                         *
 ***************************************************************************/
 
"""


import collections
import datetime
import os
import os.path
import sys
import time
import unicodedata
from os.path import expanduser

import processing
import psycopg2
import qgis.utils
from PyQt5.QtCore import *
from PyQt5.QtCore import QSizeF
from PyQt5.QtGui import *
from PyQt5.QtGui import QColor
from PyQt5.QtSql import *
from PyQt5.QtWidgets import (QAction, QApplication, QColorDialog, QMessageBox,
                             QToolBar)
from qgis.core import (QgsCategorizedSymbolRenderer,
                       QgsCoordinateReferenceSystem, QgsDataSourceUri, QgsFillSymbol,
                       QgsDiagramLayerSettings, QgsDiagramSettings,
                       QgsGraduatedSymbolRenderer, QgsPalLayerSettings,
                       QgsPieDiagram, QgsProject, QgsProperty,
                       QgsPropertyCollection, QgsRendererCategory,
                       QgsRendererRange, QgsSimpleFillSymbolLayer,
                       QgsSimpleLineSymbolLayer,
                       QgsSingleCategoryDiagramRenderer, QgsSymbol,
                       QgsTextBackgroundSettings, QgsTextFormat, QgsUnitTypes,
                       QgsVectorLayer, QgsVectorLayerExporter,
                       QgsVectorLayerSimpleLabeling, QgsWkbTypes)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QMessageBox
from qgis.utils import iface

# Import the code for the dialog
from .eficiencia_energetica_dialog import EficEnergDialog
# Initialize Qt resources from file resources.py
from .resources import *

'''Varibles globals'''
Versio_modul = "V_Q3.230927"
nomBD1 = ""
password1 = ""
host1 = ""
port1 = ""
user1 = ""
cur = None
conn = None
progress = None
textBox = ""
uri = None
numOperacions = 0
numEntitats = 0
fitxer = ""
color = QColor(0,0,0)
min = 0
max = 0
estandar = True
personalitzat = False
consum = False
emissions = False

habitatges = "cert_efi_energ_edif_mataro_geom"
habitatgesLayer = None
entitat = None
entitatLayer = None
entitatLayerJoined = None
entitatLayerResumNumHabit = None
entitatLayerResumm2 = None
entitatLayerResumMitjana = None
entitatLayerResumModa = None
entitatLayerResumMediana = None

llistaEntitats = [
    None, # Entitat per defecte, ha de donar error
    "parcel",
    "ILLES",
    "Seccions",
    "Barris",
    "DistrictesPostals",
    "Districtes"
]



colors = {
    'colorA': QColor.fromCmykF(0.85, 0.15, 0.95, 0.30),
    'colorB': QColor.fromCmykF(0.80, 0.00, 1.00, 0.00),
    'colorC': QColor.fromCmykF(0.45, 0.00, 1.00, 0.00),
    'colorD': QColor.fromCmykF(0.10, 0.00, 0.95, 0.00),
    'colorE': QColor.fromCmykF(0.05, 0.30, 1.00, 0.00),
    'colorF': QColor.fromCmykF(0.10, 0.65, 1.00, 0.00),
    'colorG': QColor.fromCmykF(0.05, 0.95, 0.95, 0.00)
}

symbols = {
    'symbolA': QgsSymbol.defaultSymbol(2),
    'symbolB': QgsSymbol.defaultSymbol(2),
    'symbolC': QgsSymbol.defaultSymbol(2),
    'symbolD': QgsSymbol.defaultSymbol(2),
    'symbolE': QgsSymbol.defaultSymbol(2),
    'symbolF': QgsSymbol.defaultSymbol(2),
    'symbolG': QgsSymbol.defaultSymbol(2)
}

'''symbol = QgsSymbol.defaultSymbol(2)
fill_symbol = QgsSimpleFillSymbolLayer.create({'color': colors["colorA"]})
symbol_layer = symbol.symbolLayer(0)
symbol_layer.setFillColor(colors["colorA"])
symbol.changeSymbolLayer(0, fill_symbol)'''

ranges = {
    'rangeA': QgsRendererRange(0.0, 34.1, symbols['symbolA'], 'A'),
    'rangeB': QgsRendererRange(34.1, 55.5, symbols['symbolB'], 'B'),
    'rangeC': QgsRendererRange(55.5, 85.4, symbols['symbolC'], 'C'),
    'rangeD': QgsRendererRange(85.4, 111.6, symbols['symbolD'], 'D'),
    'rangeE': QgsRendererRange(111.6, 136.6, symbols['symbolE'], 'E'),
    'rangeF': QgsRendererRange(136.6, 170.7, symbols['symbolF'], 'F'),
    'rangeG': QgsRendererRange(170.7, 9999999, symbols['symbolG'], 'G')
}

class EficEnerg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EficEnerg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog and keep reference

        self.dlg = EficEnergDialog()
        
        self.dlg.pushSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.pushInici.clicked.connect(self.on_click_Inici)
        self.dlg.comboBD.currentIndexChanged.connect(self.on_change_ComboConn)
        self.dlg.comboEntitat.currentIndexChanged.connect(self.on_change_comboEntitat)
        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkm2.stateChanged.connect(self.on_change_checkNumHabit_checkm2)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_checkMitjana)
        self.dlg.checkModa.stateChanged.connect(self.on_change_checkModa)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_checkMediana)
        self.dlg.pushColorP.clicked.connect(self.on_click_color)
        self.dlg.tabPersonalitzacio.currentChanged.connect(self.on_currentChanged_tabPersonalitzacio)
        self.dlg.consumButton.toggled.connect(self.on_change_consum)
        self.dlg.emissionsButton.toggled.connect(self.on_change_emissions)

        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkm2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkModa.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_entitatsIOperacions)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CCU')
        trobat=False
        for x in iface.mainWindow().findChildren(QToolBar,'CCU'): 
            self.toolbar = x
            trobat=True
        
        if not trobat:
            self.toolbar = self.iface.addToolBar('CCU')
            self.toolbar.setObjectName('CCU')
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EficEnerg', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eficiencia_energetica/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Eficiencia Energetica'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def on_change_ComboConn(self):
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global cur
        global conn
        global textBox
        global uri
        s = QSettings()
        select = 'Selecciona connexió'
        nom_conn = self.dlg.comboBD.currentText()

        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()

            nomBD1 = s.value("database", "")
            password1 = s.value("password", "")
            host1 = s.value("host", "")
            port1 = s.value("port", "")
            user1 = s.value("username", "")
            #schema1 = s.value("schema", "")

            self.barraEstat_connectant()
            textBox += f"\nConnectant a la base de dades {nomBD1}...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            # Connexio
            nomBD = nomBD1.encode('ascii', 'ignore')
            user = user1.encode('ascii', 'ignore')
            server = host1.encode('ascii', 'ignore')
            password = password1.encode('ascii', 'ignore')
            #schema = schema1.encode('ascii', 'ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + user.decode("utf-8") +"' host='" + server.decode("utf-8") +"' password='" + password.decode("utf-8") + "'" # + "'schema='" + schema.decode("utf-8") + "'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                textBox += f"\nConnectat a la base de dades {nomBD1}\n"
                textBox += "\nSelecciona les entitats amb les que vulguis treballar i indica amb quines entitats treballaràs així com els camps que vols calcular i inicia el procés"
                self.dlg.textEstat.setText(textBox)
                self.scroll_text()
                cur = conn.cursor()
                uri = QgsDataSourceUri()
                uri.setConnection(host1, port1, nomBD1, user1, password1)
                #schema1 = "public"

                self.dlg.groupEntitats.setEnabled(True)
                self.dlg.comboEntitat.setEnabled(True)
                self.dlg.groupChecks.setEnabled(True)
                self.dlg.pushInici.setEnabled(True)

                self.dlg.groupEntitats.setVisible(True)
                self.dlg.comboEntitat.setVisible(True)
                self.dlg.groupChecks.setVisible(True)

            except Exception as ex:
                self.estatInicial()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error canvi connexió")
                if conn is not None:
                    conn.rollback()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                return
            
            self.dlg.tabPersonalitzacio.setVisible(True)
            self.dlg.pushColor.setEnabled(False)
            self.dlg.pushColor.setStyleSheet("background-color: #707070")
            self.dlg.pushColor.setAutoFillBackground(True)
            self.dlg.minScale.setEnabled(False)
            self.dlg.maxScale.setEnabled(False)
             
        else:
            self.barraEstat_noConnectat()
    
    def on_change_comboEntitat(self):
        global uri
        global schema1
        global entitat
        global entitatLayer
        global llistaEntitats
        entitat = llistaEntitats[self.dlg.comboEntitat.currentIndex()]
        schema1 = "public"
        try:
            uri.setDataSource(schema1, entitat, 'geom')
            entitatLayer = QgsVectorLayer(uri.uri(), entitat, 'postgres')
        except Exception as ex:
            print ("Error no s'ha trobat entitat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error no s'ha trobat entitat")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        if entitat == llistaEntitats[1]:
            self.dlg.minScale.setValue(500)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(500)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[2]:
            self.dlg.minScale.setValue(4000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(4000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[3]:
            self.dlg.minScale.setValue(10000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(10000)
            self.dlg.maxScaleP.setValue(1)
        if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]:
            self.dlg.minScale.setValue(40000)
            self.dlg.maxScale.setValue(1)
            self.dlg.minScaleP.setValue(40000)
            self.dlg.maxScaleP.setValue(1)
        
    def on_change_entitatsIOperacions(self):
        if numOperacions > 2:
            self.dlg.labelAvis.setVisible(True)
        else:
            self.dlg.labelAvis.setVisible(False)

    def on_change_checkNumHabit_checkm2(self):
        global numOperacions

        self.dlg.labelRestriccio.setFont(QFont("MS Shell Dlg 2", 7))

        if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Al calcular la Mitjana, la Moda i la Mediana no es tenen en compte les superfícies dels habitatges.")
        
        if not self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("Els càlculs de la Mitjana i la Moda estan ponderats per la superfície dels habitatges.")

        if self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(True)
            self.dlg.checkModa.setEnabled(True)
            self.dlg.checkMediana.setEnabled(True)
            self.dlg.labelRestriccio.setVisible(True)
            self.dlg.labelRestriccio.setText("La Mitjana, la Moda i la Mediana utilitzen en els seus càlculs la superfície dels habitatges.")

        if not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
            self.dlg.checkMitjana.setEnabled(False)
            self.dlg.checkMitjana.setChecked(False)
            self.dlg.checkModa.setEnabled(False)
            self.dlg.checkModa.setChecked(False)
            self.dlg.checkMediana.setEnabled(False)
            self.dlg.checkMediana.setChecked(False)
            self.dlg.labelRestriccio.setVisible(False)
            self.dlg.labelRestriccio.setText(" ")

        if self.dlg.checkNumHabit.isChecked():
            numOperacions += 1
        if not self.dlg.checkNumHabit.isChecked():
            numOperacions -= 1
        
        if self.dlg.checkm2.isChecked():
            numOperacions += 1
        if not self.dlg.checkm2.isChecked():
            numOperacions -= 1
    
    def on_change_checkMitjana(self):
        global numOperacions
        if self.dlg.checkMitjana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkModa(self):
        global numOperacions
        if self.dlg.checkModa.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkMediana(self):
        global numOperacions
        if self.dlg.checkMediana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_click_color(self):
        global color
        try:
            aux = QColorDialog.getColor()
        except Exception as ex:
            print("Error al seleccionar color")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes copia")
            conn.rollback()
            return
        if aux.isValid():
            color = aux
            print(aux)
            print("Nom color: " + aux.name())
        else:
            color = None
            pass
        if color != None:
            self.dlg.pushColorP.setStyleSheet("background-color: " + color.name())
            self.dlg.pushColorP.setAutoFillBackground(True)

    def on_currentChanged_tabPersonalitzacio(self):
        global estandar
        global personalitzat
        if self.dlg.tabPersonalitzacio.currentIndex() == 0:
            estandar = True
            personalitzat = False
        if self.dlg.tabPersonalitzacio.currentIndex() == 1:
            estandar = False
            personalitzat = True

    def on_change_consum(self):
        global consum
        global emissions
        if self.dlg.consumButton.isChecked():
            consum = True
            emissions = False
        else:
            consum = False
            emissions = True

    def on_change_emissions(self):
        global consum
        global emissions
        if self.dlg.emissionsButton.isChecked():
            emissions = True
            consum = False
        else:
            emissions = False
            consum = True

    def ompleCombos(self, combo, llista, predef, sort):
        combo.blockSignals(True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList=None
        for elem in llista:
            try:
                if isinstance(elem, tuple):
                    item = QStandardItem(str(elem[0]))
                else:
                    item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem[0].encode('utf-8')))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def getConnections(self):
        '''Aquesta funció retorna les connexions que estan guardades en el projecte.'''
        s = QSettings()
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections

    def estatInicial(self):
        global textBox
        global Versio_modul
        self.dlg.comboBD.setCurrentIndex(0)
        self.dlg.comboEntitat.setCurrentIndex(0)
        self.barraEstat_noConnectat()
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        self.dlg.textEstat.clear()
        self.dlg.versio.setText(Versio_modul)
        self.dlg.groupEntitats.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.pushInici.setEnabled(False)
        self.dlg.groupChecks.setVisible(False)
        self.dlg.groupEntitats.setVisible(False)
        self.dlg.comboEntitat.setVisible(False)
        self.dlg.checkMitjana.setEnabled(False)
        self.dlg.checkModa.setEnabled(False)
        self.dlg.checkMediana.setEnabled(False)
        self.dlg.labelAvis.setVisible(False)
        self.dlg.progressBar.setValue(0)
        self.dlg.labelRestriccio.setVisible(False)
        self.dlg.tabPersonalitzacio.setVisible(False)
        self.dlg.pushColor.setEnabled(False)
        self.dlg.pushColor.setStyleSheet("background-color: #707070")
        self.dlg.pushColor.setAutoFillBackground(True)
        self.dlg.minScale.setEnabled(False)
        self.dlg.maxScale.setEnabled(False)
        self.dlg.pushColorP.setEnabled(True)
        self.dlg.pushColorP.setStyleSheet("background-color: #707070")
        self.dlg.pushColorP.setAutoFillBackground(True)
        self.dlg.minScaleP.setEnabled(True)
        self.dlg.maxScaleP.setEnabled(True)
        textBox = "Selecciona una base de dades...\n"
        self.dlg.textEstat.setText(textBox)
        self.dlg.setEnabled(True)
    
    def estatFinalitzat(self):
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.pushInici.setEnabled(True)
        self.dlg.pushSortir.setEnabled(True)
        self.dlg.labelAvis.setVisible(True)

    def crearCopiesCapesEntitats(self):
        global habitatgesLayer
        global entitatLayer
        
        try:
            copy_table_name = f"{habitatges}_copy_{fitxer}"
            drop_table_query = f'DROP TABLE IF EXISTS "{copy_table_name}"'
            cur.execute(drop_table_query)
            create_table_query = f'CREATE TABLE "{copy_table_name}" (LIKE "{habitatges}" INCLUDING CONSTRAINTS)'
            cur.execute(create_table_query)
            insert_features_query = f'INSERT INTO "{copy_table_name}" SELECT * FROM "{habitatges}"'
            cur.execute(insert_features_query)
            conn.commit()

            uri.setDataSource(schema1, f"{copy_table_name}", 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{copy_table_name}"', 'postgres')

            copy_table_name = f"{entitat}_copy_{fitxer}"
            drop_table_query = f'DROP TABLE IF EXISTS "{copy_table_name}"'
            cur.execute(drop_table_query)
            create_table_query = f'CREATE TABLE "{copy_table_name}" (LIKE "{entitat}" INCLUDING CONSTRAINTS)'
            cur.execute(create_table_query)
            insert_features_query = f'INSERT INTO "{copy_table_name}" SELECT * FROM "{entitat}"'
            cur.execute(insert_features_query)
            conn.commit()

            uri.setDataSource(schema1, f"{copy_table_name}", 'geom')
            entitatLayer = QgsVectorLayer(uri.uri(), f'"{copy_table_name}"', 'postgres')

        except Exception as ex:
            print ("Error a creació de capes copia")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes copia")
            conn.rollback()
            return

    def crearIDentitats(self):
        if not entitat==llistaEntitats[1]:
            global habitatgesLayer
            '''Funcio per calcular els ID de les entitats que es combinaran amb els habitatges'''
            try:
                sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" DROP COLUMN IF EXISTS "{entitat}_id";\n'
                cur.execute(sql)
                conn.commit()
                sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" ADD COLUMN "{entitat}_id" INTEGER;\n'
                sql += f'UPDATE "{habitatges}_copy_{fitxer}" SET "{entitat}_id" = "{entitat}_copy_{fitxer}".id FROM "{entitat}_copy_{fitxer}" WHERE ST_Intersects("{habitatges}_copy_{fitxer}".geom, "{entitat}_copy_{fitxer}".geom);'
                cur.execute(sql)
                conn.commit()

                uri.setDataSource(schema1, f"{habitatges}_copy_{fitxer}", 'geom')
                habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{habitatges}_copy_{fitxer}"', 'postgres')
            except Exception as ex:
                print ("Error calculant ID auxiliars entitats")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error calculant ID auxiliars entitats")
                conn.rollback()
                self.dlg.setEnabled(True)
                return

    def calcularCampsHabitatges(self):
        global habitatges
        global habitatgesLayer

        if entitat==llistaEntitats[1]:
            try:
                sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" DROP COLUMN IF EXISTS "UTM";\n'
                cur.execute(sql)
                conn.commit()

                sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" ADD COLUMN "UTM" VARCHAR;\n'
                sql += f'UPDATE "{habitatges}_copy_{fitxer}" SET "UTM" = LEFT("referencia cadastral", 7);\n'
                cur.execute(sql)
                conn.commit()
            except Exception as ex:
                print ("Error calculant camps auxiliars habitatges (en particular UTM per parcel·les)")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error calculant camps auxiliars habitatges (en particular UTM per parcel·les)")
                conn.rollback()
                self.dlg.setEnabled(True)
                return

        try:
            sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" DROP COLUMN IF EXISTS "producte_con";\n'
            sql += f'ALTER TABLE "{habitatges}_copy_{fitxer}" DROP COLUMN IF EXISTS "producte_emi";\n'
            cur.execute(sql)
            conn.commit()

            sql = f'ALTER TABLE "{habitatges}_copy_{fitxer}" ADD COLUMN "producte_con" FLOAT;\n'
            sql += f'UPDATE "{habitatges}_copy_{fitxer}" SET "producte_con" = CAST("energia primària no renovable" AS FLOAT) * CAST("metres_cadastre" AS FLOAT);\n'
            
            sql += f'ALTER TABLE "{habitatges}_copy_{fitxer}" ADD COLUMN "producte_emi" FLOAT;\n'
            sql += f'UPDATE "{habitatges}_copy_{fitxer}" SET "producte_emi" = CAST("emissions de co2" AS FLOAT) * CAST("metres_cadastre" AS FLOAT);'

            cur.execute(sql)
            conn.commit()    

            uri.setDataSource(schema1, f"{habitatges}_copy_{fitxer}", 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{habitatges}_copy_{fitxer}"', 'postgres')    
        except Exception as ex:
            print ("Error calculant camps auxiliars habitatges")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error calculant camps auxiliars habitatges")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calculNumX(self):
            
        if consum:

            ''' Drop de les columnes en cas d'existir '''
            try:
                drop = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumA";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumB";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumC";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumD";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumE";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumF";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumG";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "TotalEE";'
                cur.execute(drop)
                conn.commit()
            except Exception as ex:
                print ("Error dropping NumX columns")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error dropping NumX columns")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
            '''Calcul de les diferents columnes NumA, NumB, ..., NumG i TotalEE'''

            if entitat == llistaEntitats[1]:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumA" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumA" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumB" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumB" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumC" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumC" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumD" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumD" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumE" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumE" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumF" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumF" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumG" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumG" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "TotalEE" integer;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "TotalEE" = "NumA" + "NumB" + "NumC" + "NumD" + "NumE" + "NumF" + "NumG";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating NumX columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating NumX columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
            else:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumA" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumA" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumB" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumB" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumC" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumC" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumD" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumD" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumE" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumE" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumF" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumF" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumG" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumG" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "TotalEE" integer;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "TotalEE" = "NumA" + "NumB" + "NumC" + "NumD" + "NumE" + "NumF" + "NumG";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating NumX columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating NumX columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
                
        if emissions:
            ''' Drop de les columnes en cas d'existir '''
            try:
                drop = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumA";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumB";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumC";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumD";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumE";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumF";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "NumG";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "TotalEE";'
                cur.execute(drop)
                conn.commit()
            except Exception as ex:
                print ("Error dropping NumX columns")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error dropping NumX columns")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
            '''Calcul de les diferents columnes NumA, NumB, ..., NumG i TotalEE'''

            if entitat == llistaEntitats[1]:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumA" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumA" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'A' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumB" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumB" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'B' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumC" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumC" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'C' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumD" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumD" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'D' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumE" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumE" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'E' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumF" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumF" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'F' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumG" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumG" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'G' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "TotalEE" integer;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "TotalEE" = "NumA" + "NumB" + "NumC" + "NumD" + "NumE" + "NumF" + "NumG";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating NumX columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating NumX columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
            else:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumA" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumA" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'A' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumB" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumB" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'B' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumC" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumC" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'C' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumD" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumD" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'D' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumE" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumE" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'E' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumF" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumF" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'F' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "NumG" integer;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "NumG" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'G' THEN 1 ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "TotalEE" integer;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "TotalEE" = "NumA" + "NumB" + "NumC" + "NumD" + "NumE" + "NumF" + "NumG";'
                    cur.execute(sql)
                    conn.commit()
                    print("S'ha acabat el calcul de NumX")
                except Exception as ex:
                    print ("Error calculating NumX columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating NumX columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
    
    def calculm2(self):
        if consum:
            '''Drop de les columnes en cas d'existir'''
            try:
                drop = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2A";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2B";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2C";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2D";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2E";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2F";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2G";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "Totalm2";'
                cur.execute(drop)
                conn.commit()
            except Exception as ex:
                print ("Error dropping m2X columns")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error dropping m2X columns")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
            '''Calcul m2A, m2B, ..., m2G, Totalm2'''
            
            if entitat == llistaEntitats[1]:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2A" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2A" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2B" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2B" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2C" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2C" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2D" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2D" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2E" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2E" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2F" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2F" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2G" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2G" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "Totalm2" float;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "Totalm2" = "m2A" + "m2B" + "m2C" + "m2D" + "m2E" + "m2F" + "m2G";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating m2X columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating m2X columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
            else:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2A" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2A" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2B" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2B" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2C" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2C" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2D" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2D" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2E" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2E" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2F" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2F" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2G" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2G" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "Totalm2" float;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "Totalm2" = "m2A" + "m2B" + "m2C" + "m2D" + "m2E" + "m2F" + "m2G";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating m2X columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating m2X columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
        if emissions:
            '''Drop de les columnes en cas d'existir'''
            try:
                drop = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2A";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2B";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2C";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2D";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2E";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2F";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "m2G";\n'
                drop += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "Totalm2";'
                cur.execute(drop)
                conn.commit()
            except Exception as ex:
                print ("Error dropping m2X columns")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error dropping m2X columns")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
            '''Calcul m2A, m2B, ..., m2G, Totalm2'''
            
            if entitat == llistaEntitats[1]:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2A" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2A" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'A' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2B" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2B" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'B' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2C" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2C" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'C' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2D" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2D" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'D' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2E" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2E" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'E' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2F" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2F" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'F' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2G" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2G" = subquery.sum_count FROM (SELECT "UTM", SUM(CASE WHEN "qualificacio emissions de co2" = 'G' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "Totalm2" float;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "Totalm2" = "m2A" + "m2B" + "m2C" + "m2D" + "m2E" + "m2F" + "m2G";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating m2X columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating m2X columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return
            else:
                try:
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2A" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2A" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'A' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2B" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2B" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'B' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2C" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2C" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'C' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2D" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2D" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'D' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2E" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2E" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'E' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2F" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2F" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'F' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "m2G" float;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "m2G" = subquery.sum_count FROM (SELECT "id", SUM(CASE WHEN "qualificacio emissions de co2" = 'G' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'''
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "Totalm2" float;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "Totalm2" = "m2A" + "m2B" + "m2C" + "m2D" + "m2E" + "m2F" + "m2G";'
                    cur.execute(sql)
                    conn.commit()
                except Exception as ex:
                    print ("Error calculating m2X columns")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.critical(None, "Error", "Error calculating m2X columns")
                    conn.rollback()
                    self.dlg.setEnabled(True)
                    return

    def calculMitjana(self):
            
        if consum:

            ''' Nous càlculs octubre '''
            try:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "sum_consums";\n'

                    cur.execute(sql)
                    conn.commit()

                    if entitat == llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_consums" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_consums" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("energia primària no renovable" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_consums" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_consums" = subquery.sum_count FROM (SELECT "id", SUM(CAST("energia primària no renovable" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'
                        cur.execute(sql)
                        conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "INDEX_consums_hab" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "INDEX_consums_hab" = CASE WHEN "TotalEE" = 0 THEN 0 ELSE ("sum_consums" / "TotalEE") END;\n'

                    cur.execute(sql)
                    conn.commit()

                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "sum_producte_con";\n'

                    cur.execute(sql)
                    conn.commit()

                    if entitat == llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_producte_con" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_producte_con" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("producte_con" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'
                        sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_m2" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_m2" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("metres_cadastre" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";'
                        cur.execute(sql)
                        conn.commit()
                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_producte_con" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_producte_con" = subquery.sum_count FROM (SELECT "id", SUM(CAST("producte_con" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'
                        sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_m2" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_m2" = subquery.sum_count FROM (SELECT "id", SUM(CAST("metres_cadastre" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";'
                        cur.execute(sql)
                        conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "INDEX_consum" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "INDEX_consum" = CASE WHEN "sum_m2" = 0 THEN 0 ELSE ("sum_producte_con"/"sum_m2") END;\n'
                    cur.execute(sql)
                    conn.commit()
            
            except Exception as ex:
                print ("Error fent sumes de camps de la mitjana")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent sumes de camps de la mitjana")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
        if emissions:
            try:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "sum_emissions";\n'

                    cur.execute(sql)
                    conn.commit()

                    if entitat == llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_emissions" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_emissions" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("emissions de co2" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";'
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_emissions" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_emissions" = subquery.sum_count FROM (SELECT "id", SUM(CAST("emissions de co2" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";'
                        cur.execute(sql)
                        conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "INDEX_emissions_hab" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "INDEX_emissions_hab" = CASE WHEN "TotalEE" = 0 THEN 0 ELSE ("sum_emissions" / "TotalEE") END;\n'

                    cur.execute(sql)
                    conn.commit()

                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "sum_producte_emi";\n'
                    cur.execute(sql)
                    conn.commit()

                    if entitat == llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_producte_emi" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_producte_emi" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("producte_emi" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";\n'
                        sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_m2" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_m2" = subquery.sum_count FROM (SELECT "UTM", SUM(CAST("metres_cadastre" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "UTM") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."UTM" = subquery."UTM";'
                        cur.execute(sql)
                        conn.commit()
                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_producte_emi" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_producte_emi" = subquery.sum_count FROM (SELECT "id", SUM(CAST("producte_emi" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";\n'
                        sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "sum_m2" FLOAT;\n'
                        sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "sum_m2" = subquery.sum_count FROM (SELECT "id", SUM(CAST("metres_cadastre" AS FLOAT)) AS sum_count FROM "Capa unida {entitat}_{fitxer}" GROUP BY "id") AS subquery WHERE "Capa unida {entitat}_{fitxer}"."id" = subquery."id";'
                        cur.execute(sql)
                        conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "INDEX_emissions" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "INDEX_emissions" = CASE WHEN "sum_m2" = 0 THEN 0 ELSE ("sum_producte_emi"/"sum_m2") END;'
                    cur.execute(sql)
                    conn.commit()
            
            except Exception as ex:
                print ("Error fent sumes de camps de la mitjana")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent sumes de camps de la mitjana")
                conn.rollback()
                self.dlg.setEnabled(True)
                return

    def calculModa(self):

        if consum:
            ''' Nous càlculs octubre '''
            try:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "maxConsfreq";\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "QualifMaxFreq";\n'
                    cur.execute(sql)
                    conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "maxConsfreq" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "maxConsfreq" = GREATEST("NumA", "NumB", "NumC", "NumD", "NumE", "NumF", "NumG");\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "QualifMaxFreq" VARCHAR;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "QualifMaxFreq" =
                        CASE
                            WHEN "maxConsfreq" = "NumA" THEN 'A'
                            WHEN "maxConsfreq" = "NumB" THEN 'B'
                            WHEN "maxConsfreq" = "NumC" THEN 'C'
                            WHEN "maxConsfreq" = "NumD" THEN 'D'
                            WHEN "maxConsfreq" = "NumE" THEN 'E'
                            WHEN "maxConsfreq" = "NumF" THEN 'F'
                            ELSE 'G'
                        END;
                    '''
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAhabConsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAhabConsum" = subquery.moda
                        FROM (
                            SELECT "UTM",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxFreq"
                                                THEN CAST("energia primària no renovable" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxFreq"
                                                THEN 1
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAhabConsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAhabConsum" = subquery.moda
                        FROM (
                            SELECT "id",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxFreq"
                                                THEN CAST("energia primària no renovable" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxFreq"
                                                THEN 1
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()
                        



                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "maxConsum";\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "QualifMaxSup";\n'
                    cur.execute(sql)
                    conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "maxConsum" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "maxConsum" = GREATEST("m2A", "m2B", "m2C", "m2D", "m2E", "m2F", "m2G");\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "QualifMaxSup" VARCHAR;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "QualifMaxSup" =
                        CASE
                            WHEN "maxConsum" = "m2A" THEN 'A'
                            WHEN "maxConsum" = "m2B" THEN 'B'
                            WHEN "maxConsum" = "m2C" THEN 'C'
                            WHEN "maxConsum" = "m2D" THEN 'D'
                            WHEN "maxConsum" = "m2E" THEN 'E'
                            WHEN "maxConsum" = "m2F" THEN 'F'
                            ELSE 'G'
                        END;
                    '''
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAsupConsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAsupConsum" = subquery.moda
                        FROM (
                            SELECT "UTM",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                                THEN CAST("energia primària no renovable" AS FLOAT) * CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                                THEN CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAsupConsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAsupConsum" = subquery.moda
                        FROM (
                            SELECT "id",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                                THEN CAST("energia primària no renovable" AS FLOAT) * CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                                THEN CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()
            except Exception as ex:
                print ("Error fent calcul moda")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent calcul moda")
                conn.rollback()
                self.dlg.setEnabled(True)
                return

        if emissions:
            print("S'arriba al calcul de la moda")
            try:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "maxEmifreq";\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "QualifMaxFreq";\n'
                    cur.execute(sql)
                    conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "maxEmifreq" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "maxEmifreq" = GREATEST("NumA", "NumB", "NumC", "NumD", "NumE", "NumF", "NumG");\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "QualifMaxFreq" VARCHAR;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "QualifMaxFreq" =
                        CASE
                            WHEN "maxEmifreq" = "NumA" THEN 'A'
                            WHEN "maxEmifreq" = "NumB" THEN 'B'
                            WHEN "maxEmifreq" = "NumC" THEN 'C'
                            WHEN "maxEmifreq" = "NumD" THEN 'D'
                            WHEN "maxEmifreq" = "NumE" THEN 'E'
                            WHEN "maxEmifreq" = "NumF" THEN 'F'
                            ELSE 'G'
                        END;
                    '''
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAhabEmissions" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAhabEmissions" = subquery.moda
                        FROM (
                            SELECT "UTM",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxFreq"
                                                THEN CAST("emissions de co2" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxFreq"
                                                THEN 1
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAhabEmissions" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAhabEmissions" = subquery.moda
                        FROM (
                            SELECT "id",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxFreq"
                                                THEN CAST("emissions de co2" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxFreq"
                                                THEN 1
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()
                        print("S'acaba el calcul de moda")

                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "maxEmissions";\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" DROP COLUMN IF EXISTS "QualifMaxSup";\n'
                    cur.execute(sql)
                    conn.commit()

                    sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "maxEmissions" FLOAT;\n'
                    sql += f'UPDATE "Capa unida {entitat}_{fitxer}" SET "maxEmissions" = GREATEST("m2A", "m2B", "m2C", "m2D", "m2E", "m2F", "m2G");\n'
                    sql += f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "QualifMaxSup" VARCHAR;\n'
                    sql += f'''UPDATE "Capa unida {entitat}_{fitxer}" SET "QualifMaxSup" =
                        CASE
                            WHEN "maxEmissions" = "m2A" THEN 'A'
                            WHEN "maxEmissions" = "m2B" THEN 'B'
                            WHEN "maxEmissions" = "m2C" THEN 'C'
                            WHEN "maxEmissions" = "m2D" THEN 'D'
                            WHEN "maxEmissions" = "m2E" THEN 'E'
                            WHEN "maxEmissions" = "m2F" THEN 'F'
                            ELSE 'G'
                        END;
                    '''
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAsupEmissions" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAsupEmissions" = subquery.moda
                        FROM (
                            SELECT "UTM",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxSup"
                                                THEN CAST("emissions de co2" AS FLOAT) * CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxSup"
                                                THEN CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql =   f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMODAsupEmissions" FLOAT;\n'
                        sql +=  f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMODAsupEmissions" = subquery.moda
                        FROM (
                            SELECT "id",
                                (
                                    SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxSup"
                                                THEN CAST("emissions de co2" AS FLOAT) * CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END
                                    ) / NULLIF(SUM (
                                        CASE
                                            WHEN "qualificacio emissions de co2" = "QualifMaxSup"
                                                THEN CAST("metres_cadastre" AS FLOAT)
                                            ELSE 0
                                        END), 0
                                    )
                                ) AS moda
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()    

            except Exception as ex:
                print ("Error fent calcul moda")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent calcul moda")
                conn.rollback()
                self.dlg.setEnabled(True)
                return

    def calculMediana(self):

        if consum:
            try:
                if self.dlg.checkNumHabit.isChecked():
                    sql = f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE CAST("energia primària no renovable" AS FLOAT) = 0 OR "metres_cadastre" IS NULL;\n'
                    if entitat==llistaEntitats[1]:
                        sql += f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE "UTM" IS NULL;\n'
                    else:
                        sql += f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE "id" IS NULL;\n'
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        'Calcul diferent suggerit pel copilot'
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMEDIANAconsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMEDIANAconsum" = subquery.mediana
                        FROM (
                            SELECT "UTM",
                                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("energia primària no renovable" AS FLOAT)) AS mediana
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMEDIANAconsum" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMEDIANAconsum" = subquery.mediana
                        FROM (
                            SELECT "id",
                                    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("energia primària no renovable" AS FLOAT)) AS mediana
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

            except Exception as ex:
                print ("Error fent calcul mediana")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent calcul mediana")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
            
        if emissions:
            try:
                if self.dlg.checkNumHabit.isChecked():
                    sql = f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE CAST("emissions de co2" AS FLOAT) = 0 OR "metres_cadastre" IS NULL;\n'
                    if entitat==llistaEntitats[1]:
                        sql += f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE "UTM" IS NULL;\n'
                    else:
                        sql += f'DELETE FROM "Capa unida {entitat}_{fitxer}" WHERE "id" IS NULL;\n'
                    cur.execute(sql)
                    conn.commit()

                    if entitat==llistaEntitats[1]:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMEDIANAemissions" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMEDIANAemissions" = subquery.mediana
                        FROM (
                            SELECT "UTM",
                                    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("emissions de co2" AS FLOAT)) AS mediana
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "UTM"
                        ) AS subquery
                        WHERE c."UTM" = subquery."UTM"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()

                    else:
                        sql = f'ALTER TABLE "Capa unida {entitat}_{fitxer}" ADD COLUMN "indexMEDIANAemissions" FLOAT;\n'
                        sql += f'''
                        UPDATE "Capa unida {entitat}_{fitxer}" AS c
                        SET "indexMEDIANAemissions" = subquery.mediana
                        FROM (
                            SELECT "id",
                                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("emissions de co2" AS FLOAT)) AS mediana
                            FROM {schema1}."Capa unida {entitat}_{fitxer}"
                            GROUP BY "id"
                        ) AS subquery
                        WHERE c."id" = subquery."id"\n;
                        '''
                        cur.execute(sql)
                        conn.commit()
                        print("S'acaba el calcul de mediana")

            except Exception as ex:
                print ("Error fent calcul mediana")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.critical(None, "Error", "Error fent calcul mediana")
                conn.rollback()
                self.dlg.setEnabled(True)
                return
        
    def dropCapesUnides(self):
        try:
            sql = f'DROP TABLE IF EXISTS "Capa unida {entitat}_{fitxer}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table if exists de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table if exists de capes unides")
            conn.rollback()
            return
    
    def dropCapesReUnidesNumHabit(self):
        try:
            sql = f'''DROP TABLE IF EXISTS "{entitat} amb nombre d'habitatges segons categoria_{fitxer}";'''
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte NumHabit")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table resum recompte NumHabit")
            conn.rollback()
            return
        
    def dropCapesReUnidesm2(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{entitat} amb metres quadrats segons categoria_{fitxer}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte m2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table resum recompte m2")
            conn.rollback()
            return
        
    def dropCapesReUnidesMitjana(self):
        try:
            sql = f'DROP TABLE IF EXISTS "Mitjana de {entitat}_{fitxer}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte mitjana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table resum recompte mitjana")
            conn.rollback()
            return
        
    def dropCapesReUnidesModa(self):
        try:
            sql = f'DROP TABLE IF EXISTS "Moda de {entitat}_{fitxer}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte moda")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table resum recompte moda")
            conn.rollback()
            return

    def dropCapesReUnidesMediana(self):
        try:
            sql = f'DROP TABLE IF EXISTS "Mediana de {entitat}_{fitxer}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte mediana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a drop table resum recompte mediana")
            conn.rollback()
            return

    def scroll_text(self):
        self.dlg.textEstat.moveCursor(QTextCursor.End)
    
    def updateProgress(self, progress):
        self.dlg.progressBar.setValue(progress)
        QApplication.processEvents()

    def unirCapes(self):
        global uri
        global entitatLayerJoined

        if entitat == llistaEntitats[1]:
            alg_params = {
                "INPUT": entitatLayer,
                "FIELD": "UTM",
                "INPUT_2": habitatgesLayer,
                "FIELD_2": "UTM",
                "FIELDS_TO_COPY": ["referencia cadastral", "metres_cadastre", "qualificació de consum energia primaria no renovable", "energia primària no renovable", "qualificacio emissions de co2", "emissions de co2", "producte_con", "producte_emi"],
                "METHOD": 0,
                "OUTPUT": 'memory:'
            }
        else:
            alg_params = {
                "INPUT": entitatLayer,
                "FIELD": "id",
                "INPUT_2": habitatgesLayer,
                "FIELD_2": f"{entitat}_id",
                "FIELDS_TO_COPY": ["referencia cadastral", "metres_cadastre", "qualificació de consum energia primaria no renovable", "energia primària no renovable", "qualificacio emissions de co2", "emissions de co2", "producte_con", "producte_emi"],
                "METHOD": 0,
                "OUTPUT": 'memory:'
            }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes")
            return

        capa_unida = result["OUTPUT"]
        layerEntitat = capa_unida
        if not layerEntitat.isValid():
            print("ERROR LAYER UNIT")
            return
        layerEntitat.setName(f"Capa unida {entitat}_{fitxer}")
        layerEntitat.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="Capa unida {entitat}_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerEntitat.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerEntitat.crs(), overwrite=True)
            exporter.addFeatures(layerEntitat.getFeatures())
            QApplication.processEvents()

        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def carregarCapesMapa(self):
        global entitatLayerJoined
        try:
            uri.setDataSource(schema1, f"Capa unida {entitat}_{fitxer}", 'geom')
            entitatLayerJoined = QgsVectorLayer(uri.uri(), f"Capa unida {entitat}_{fitxer}", 'postgres')
        except Exception as ex:
            print ("Error a carregar capes al mapa")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a carregar capes al mapa")
            conn.rollback()
            return
        QApplication.processEvents()

    def reUnirCapesNumHabit(self):
        global entitatLayerResumNumHabit

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkNumHabit.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
            alg_params = {
                "INPUT": layer,
                "FIELD": "id",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id",
                "FIELDS_TO_COPY": ['NumA', 'NumB', 'NumC', 'NumD', 'NumE', 'NumF', 'NumG', 'TotalEE'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes NumHabit")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes NumHabit")
            return
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        if consum:
            layerResum.setName(f"Consum de {entitat.upper()} amb nombre d'habitatges segons categoria")
        if emissions:
            layerResum.setName(f"Emissions de {entitat.upper()} amb nombre d'habitatges segons categoria")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumNumHabit = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{entitat} amb nombre d'habitatges segons categoria_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesm2(self):
        global entitatLayerResumm2

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
            alg_params = {
                "INPUT": layer,
                "FIELD": "id",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id",
                "FIELDS_TO_COPY": ['m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G', 'Totalm2'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes m2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes m2")
            return
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        if consum:
            layerResum.setName(f"Consum de {entitat.upper()} amb metres quadrats segons categoria")
        if emissions:
            layerResum.setName(f"Emissions de {entitat.upper()} amb metres quadrats segons categoria")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumm2 = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{entitat} amb metres quadrats segons categoria_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesMitjana(self):
        global entitatLayerResumMitjana

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri

        if self.dlg.checkMitjana.isChecked():
            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                if consum:
                    alg_params = {
                        "INPUT": layer,
                        "FIELD": "id",
                        "INPUT_2": layerEntitat,
                        "FIELD_2": "id",
                        "FIELDS_TO_COPY": ['sum_consums', 'INDEX_consums_hab'],
                        "METHOD": 1,
                        "OUTPUT": 'memory:'
                    }
                if emissions:
                    alg_params = {
                        "INPUT": layer,
                        "FIELD": "id",
                        "INPUT_2": layerEntitat,
                        "FIELD_2": "id",
                        "FIELDS_TO_COPY": ['sum_emissions', 'INDEX_emissions_hab'],
                        "METHOD": 1,
                        "OUTPUT": 'memory:'
                    }
            if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                if consum:
                    alg_params = {
                        "INPUT": layer,
                        "FIELD": "id",
                        "INPUT_2": layerEntitat,
                        "FIELD_2": "id",
                        "FIELDS_TO_COPY": ['sum_producte_con', 'sum_m2', 'INDEX_consum'],
                        "METHOD": 1,
                        "OUTPUT": 'memory:'
                    }
                if emissions:
                    alg_params = {
                        "INPUT": layer,
                        "FIELD": "id",
                        "INPUT_2": layerEntitat,
                        "FIELD_2": "id",
                        "FIELDS_TO_COPY": ['sum_producte_emi', 'sum_m2', 'INDEX_emissions'],
                        "METHOD": 1,
                        "OUTPUT": 'memory:'
                    }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes mitjana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes mitjana")
            return
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        if consum:
            layerResum.setName(f"Mitjana de consum de {entitat.upper()}")
        if emissions:
            layerResum.setName(f"Mitjana de emissions de {entitat.upper()}")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumMitjana = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="Mitjana de {entitat}_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return
        
    def reUnirCapesModa(self):
        global entitatLayerResumModa

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkModa.isChecked():
            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                if consum:
                    alg_params = {
                            "INPUT": layer,
                            "FIELD": "id",
                            "INPUT_2": layerEntitat,
                            "FIELD_2": "id",
                            "FIELDS_TO_COPY": ['maxConsfreq', 'QualifMaxFreq', 'indexMODAhabConsum'],
                            "METHOD": 1,
                            "OUTPUT": 'memory:'
                        }
                if emissions:
                        alg_params = {
                            "INPUT": layer,
                            "FIELD": "id",
                            "INPUT_2": layerEntitat,
                            "FIELD_2": "id",
                            "FIELDS_TO_COPY": ['maxEmifreq', 'QualifMaxFreq', 'indexMODAhabEmissions'],
                            "METHOD": 1,
                            "OUTPUT": 'memory:'
                        }
            if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                if consum:
                    alg_params = {
                            "INPUT": layer,
                            "FIELD": "id",
                            "INPUT_2": layerEntitat,
                            "FIELD_2": "id",
                            "FIELDS_TO_COPY": ['maxConsum', 'QualifMaxSup', 'indexMODAsupConsum'],
                            "METHOD": 1,
                            "OUTPUT": 'memory:'
                        }
                if emissions:
                        alg_params = {
                            "INPUT": layer,
                            "FIELD": "id",
                            "INPUT_2": layerEntitat,
                            "FIELD_2": "id",
                            "FIELDS_TO_COPY": ['maxEmissions', 'QualifMaxSup', 'indexMODAsupEmissions'],
                            "METHOD": 1,
                            "OUTPUT": 'memory:'
                        }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes moda")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes moda")
            return
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        if consum:
            layerResum.setName(f"Moda de consum de {entitat.upper()}")
        if emissions:
            layerResum.setName(f"Moda de emissions de {entitat.upper()}")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumModa = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="Moda de {entitat}_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesMediana(self):
        global entitatLayerResumMediana

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkMediana.isChecked():
            if consum:
                alg_params = {
                    "INPUT": layer,
                    "FIELD": "id",
                    "INPUT_2": layerEntitat,
                    "FIELD_2": "id",
                    "FIELDS_TO_COPY": ['indexMEDIANAconsum'],
                    "METHOD": 1,
                    "OUTPUT": 'memory:'
                }
            if emissions:
                alg_params = {
                    "INPUT": layer,
                    "FIELD": "id",
                    "INPUT_2": layerEntitat,
                    "FIELD_2": "id",
                    "FIELDS_TO_COPY": ['indexMEDIANAemissions'],
                    "METHOD": 1,
                    "OUTPUT": 'memory:'
                }
        try:
            result = processing.run("native:joinattributestable", alg_params)
        except Exception as ex:
            print ("Error al procés d'unir capes mediana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error al procés d'unir capes mediana")
            return
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        if consum:
            layerResum.setName(f"Mediana de consum de {entitat.upper()}")
        if emissions:
            layerResum.setName(f"Mediana de emissions de {entitat.upper()}")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumMediana = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="Mediana de {entitat}_{fitxer}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def dropFinalCapesIColumnes(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{habitatges}_copy_{fitxer}";\n'
            sql += f'DROP TABLE IF EXISTS "{entitat}_copy_{fitxer}";\n'
            sql += f'DROP TABLE IF EXISTS "Capa unida {entitat}_{fitxer}";\n'
            sql += f'''DROP TABLE IF EXISTS "{entitat} amb nombre d'habitatges segons categoria_{fitxer}";\n'''
            sql += f'DROP TABLE IF EXISTS "{entitat} amb metres quadrats segons categoria_{fitxer}";\n'
            sql += f'DROP TABLE IF EXISTS "Mitjana de {entitat}_{fitxer}";\n'
            sql += f'DROP TABLE IF EXISTS "Moda de {entitat}_{fitxer}";\n'
            sql += f'DROP TABLE IF EXISTS "Mediana de {entitat}_{fitxer}";\n'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error fent drops finals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error fent drops finals")
            conn.rollback()
            self.dlg.setEnabled(True)
            return 
        
    def barraEstat_noConnectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "No connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
        QApplication.processEvents()
        
    def barraEstat_connectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
    def barraEstat_connectant(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectant..."'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
        self.dlg.lblEstatConn.setText('Connectant...')
        QApplication.processEvents()

    def maxTotalEE(self):
        global conn
        global cur
        try:
            sql = f'''SELECT MAX("TotalEE") FROM "Capa unida {entitat}_{fitxer}";'''
            cur.execute(sql)
        except Exception as ex:
            print ("Error fent maxTotalEE")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args) 
            print (message)
            QMessageBox.critical(None, "Error", "Error trobant el nombre maxim d'habitatges")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        return cur.fetchone()[0]

    def maxTotalm2(self):
        global conn
        global cur
        try:
            sql = f'''SELECT MAX("Totalm2"::float) FROM "Capa unida {entitat}_{fitxer}";'''
            cur.execute(sql)
            result = cur.fetchone()[0]
        except Exception as ex:
            print ("Error fent maxTotalm2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args) 
            print (message)
            QMessageBox.critical(None, "Error", "Error trobant el nombre maxim de metres quadrats")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (result == None):
            return 0
        else:
            return float(result)

    def on_click_Sortir(self):
        if cur != None and conn != None:
            cur.close()
            conn.close()
        self.estatInicial()
        self.dlg.close()

    def on_click_Inici(self):
        global cur
        global conn
        global textBox
        global nomBD1
        global password1
        global host1
        global user1
        global port1
        global schema1
        global uri
        global color
        global min
        global max
        global estandar
        global personalitzat

        global habitatges
        global habitatgesLayer
        global entitat
        global entitatLayer
        global entitatLayerJoined
        global entitatLayerResumNumHabit
        global entitatLayerResumm2
        global entitatLayerResumMitjana
        global entitatLayerResumModa
        global entitatLayerResumMediana
        global fitxer
        global ranges
        global colors
        global symbols

        fitxer = datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")

        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1, port1, nomBD1, user1, password1)
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.critical(None, "Error", "Error a la connexio")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        if entitat == llistaEntitats[0] or entitat == None:
            print("No s'ha seleccionat cap entitat amb la que treballar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap entitat amb la que treballar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked() and not self.dlg.checkMitjana.isChecked() and not self.dlg.checkModa.isChecked() and not self.dlg.checkMediana.isChecked()):
            print ("No s'ha seleccionat cap càlcul que realitzar")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat cap càlcul que realitzar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        if (not self.dlg.consumButton.isChecked() and not self.dlg.emissionsButton.isChecked()):
            print ("No s'ha seleccionat ni consum ni emissions")
            QMessageBox.warning(None, "Error", "No s'ha seleccionat ni consum ni emissions")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        self.updateProgress(10)

        self.dlg.setEnabled(False)
        self.dlg.groupBD.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.groupEntitats.setEnabled(False)
        textBox = f"INICIANT EL PROCÉS...\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()

        ''' Crear copies capes originals '''
        self.crearCopiesCapesEntitats()
        QApplication.processEvents()

        self.updateProgress(20)

        ''' IDs Entitats '''

        textBox += f"Calculant ID d'entitats seleccionades...\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.calcularCampsHabitatges()
        if not entitat==llistaEntitats[1]:
            self.crearIDentitats()
        QApplication.processEvents()

        self.updateProgress(30)

        ''' Unió capes '''

        textBox += f"Unint capes seleccionades...\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.dropCapesUnides()
        self.unirCapes()
        QApplication.processEvents()
        
        self.updateProgress(40)

        ''' Agafem color i valors minim i maxim de visibilitat per escala '''

        '''
        if estandar:
            color = QColor("#707070")
            min = self.dlg.minScale.value()
            max = self.dlg.maxScale.value()
        if personalitzat:
            color = self.dlg.pushColorP.palette().color(1)
            min = self.dlg.minScaleP.value()
            max = self.dlg.maxScaleP.value()
        '''

        ''' Processament càlculs '''

        'NumX habitatges per entitats'

        if(self.dlg.checkNumHabit.isChecked()):
            textBox += f"Calculant NumX d'habitatges...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.calculNumX()
            QApplication.processEvents()
        
        'm2 habitatges per entitats'
        
        if(self.dlg.checkm2.isChecked()):
            textBox += f"Calculant m2 d'habitatges...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.calculm2()
            QApplication.processEvents()    
        
        'Mitjana habitatges per entitats'

        if self.dlg.checkMitjana.isChecked():
            textBox += f"Calculant mitjana de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.calculMitjana()
            QApplication.processEvents()

        'Moda habitatges per entitats'

        if self.dlg.checkModa.isChecked():
            textBox += f"Calculant moda de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.calculModa()
            QApplication.processEvents()

        'Mediana habitatges per entitats'

        if self.dlg.checkMediana.isChecked():
            textBox += f"Calculant mediana de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.scroll_text()
            self.calculMediana()
            QApplication.processEvents()

        self.updateProgress(50)

        'Carregar capes, fer drops i tornar a unir-les per alleugerir-les'
        'per NumHabit'

        if self.dlg.checkNumHabit.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesNumHabit()
            self.reUnirCapesNumHabit()
            QApplication.processEvents()      
        
        'per m2'

        if self.dlg.checkm2.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesm2()
            self.reUnirCapesm2()
            QApplication.processEvents()

        'per mitjana'
        if self.dlg.checkMitjana.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesMitjana()
            self.reUnirCapesMitjana()
            QApplication.processEvents()

        'per moda'

        if self.dlg.checkModa.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesModa()
            self.reUnirCapesModa()
            QApplication.processEvents()

        'per mediana'

        if self.dlg.checkMediana.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesMediana()
            self.reUnirCapesMediana()
            QApplication.processEvents()

        self.updateProgress(60)

        ''' Diagrames de pie chart '''

        if self.dlg.checkNumHabit.isChecked():
            uri.setDataSource(schema1, f"{entitat} amb nombre d'habitatges segons categoria_{fitxer}", 'geom')
            capaUnidaNumHabit = QgsVectorLayer(uri.uri(), f"{entitat} amb nombre d'habitatges segons categoria_{fitxer}", 'postgres')
            capaUnidaNumHabit_temp_features = [feat for feat in capaUnidaNumHabit.getFeatures()]
            if consum:
                capaUnidaNumHabit_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Consum de {entitat.upper()} amb nombre d'habitatges segons categoria", "memory")
            if emissions:
                capaUnidaNumHabit_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Emissions de {entitat.upper()} amb nombre d'habitatges segons categoria", "memory")
            capaUnidaNumHabit_temp_data = capaUnidaNumHabit_temp.dataProvider()
            attributes = capaUnidaNumHabit.dataProvider().fields().toList()
            capaUnidaNumHabit_temp_data.addAttributes(attributes)
            capaUnidaNumHabit_temp.updateFields()
            capaUnidaNumHabit_temp_data.addFeatures(capaUnidaNumHabit_temp_features)
            if capaUnidaNumHabit_temp.isValid():
                QgsProject.instance().addMapLayer(capaUnidaNumHabit_temp)
                QApplication.processEvents()
            else:
                print("No s'ha pogut afegir el layer de numhabit")

            diagramNumHabit = QgsPieDiagram()
            diagramNumHabitSettings = QgsDiagramSettings()
            diagramNumHabitSettings.categoryColors = colors.values()
            diagramNumHabitSettings.categoryAttributes = {'NumA', 'NumB', 'NumC', 'NumD', 'NumE', 'NumF', 'NumG'}
            diagramNumHabitSettings.scaleByArea = False
            diagramNumHabitSettings.scaleBasedVisibility = True
            diagramNumHabitSettings.size = QSizeF(15, 15)
            #diagramNumHabitSettings.minimumScale = min
            #diagramNumHabitSettings.maximumScale = max
            diagramNumHabitSettings.minimumScale = 10000
            diagramNumHabitSettings.maximumScale = 1000
            diagramNumHabitSettings.categoryLabels = ["A", "B", "C", "D", "E", "F", "G"]
            diagramNumHabitSettings.enabled = True

            diagramNumHabitRenderer = QgsSingleCategoryDiagramRenderer()
            diagramNumHabitRenderer.setDiagram(diagramNumHabit)
            diagramNumHabitRenderer.setDiagramSettings(diagramNumHabitSettings)
            
            capaUnidaNumHabit_temp.setDiagramRenderer(diagramNumHabitRenderer)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibilitat = QgsProperty()
            propertyVisibilitat.setExpressionString("""CASE WHEN "TotalEE" = 0 THEN False WHEN "TotalEE" IS NULL THEN False ELSE True END """)
            propertyVisibilitat.setActive(True)

            propertyCollection = QgsPropertyCollection("Propietats")
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibilitat)

            diagramNumHabitLayerSettings = QgsDiagramLayerSettings()
            diagramNumHabitLayerSettings.setDataDefinedProperties(propertyCollection)
                        
            capaUnidaNumHabit_temp.setDiagramLayerSettings(diagramNumHabitLayerSettings)
            
            single_symbol_renderer = capaUnidaNumHabit_temp.renderer().clone()
            symbol = single_symbol_renderer.symbol()
            #color = QColor(255, 0, 0)
            #symbol.setColor(color)
            #single_symbol_renderer.setSymbol(symbol)
            symbol_layer = QgsSimpleLineSymbolLayer()
            #symbol_layer = QgsSimpleLineSymbolLayer(color)
            symbol_layer.setWidth(0)
            capaUnidaNumHabit_temp.setRenderer(single_symbol_renderer)

            capaUnidaNumHabit_temp.triggerRepaint()
            QApplication.processEvents()

        if self.dlg.checkm2.isChecked():
            uri.setDataSource(schema1, f"{entitat} amb metres quadrats segons categoria_{fitxer}", 'geom')
            capaUnidam2 = QgsVectorLayer(uri.uri(), f"{entitat} amb metres quadrats segons categoria_{fitxer}", 'postgres')
            capaUnidam2_temp_features = [feat for feat in capaUnidam2.getFeatures()]
            if consum:
                capaUnidam2_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Consum de {entitat.upper()} amb metres quadrats segons categoria", "memory")
            if emissions:
                capaUnidam2_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Emissions de {entitat.upper()} amb metres quadrats segons categoria", "memory")
            capaUnidam2_temp_data = capaUnidam2_temp.dataProvider()
            attributes = capaUnidam2.dataProvider().fields().toList()
            capaUnidam2_temp_data.addAttributes(attributes)
            capaUnidam2_temp.updateFields()
            capaUnidam2_temp_data.addFeatures(capaUnidam2_temp_features)
            if capaUnidam2_temp.isValid():
                QgsProject.instance().addMapLayer(capaUnidam2_temp)
                QApplication.processEvents()
            else:
                print("No s'ha pogut afegir el layer de m2")

            diagramm2 = QgsPieDiagram()
            diagramm2Settings = QgsDiagramSettings()
            diagramm2Settings.categoryColors = colors.values()
            diagramm2Settings.categoryAttributes = {'m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G'}
            diagramm2Settings.scaleByArea = False # Deixem en False el escalat per area de manera que no es descontrolin els tamanys amb els zooms
            diagramm2Settings.scaleBasedVisibility = True
            diagramm2Settings.size = QSizeF(15, 15)
            if entitat == llistaEntitats[1]: # parcel
                diagramm2Settings.minimumScale = 500
                diagramm2Settings.maximumScale = 1
            if entitat == llistaEntitats[2]: # illes
                diagramm2Settings.minimumScale = 4000
                diagramm2Settings.maximumScale = 1
            if entitat == llistaEntitats[3]: # seccions
                diagramm2Settings.minimumScale = 10000
                diagramm2Settings.maximumScale = 1
            if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]: # barris districtespostals i districtes
                diagramm2Settings.minimumScale = 40000
                diagramm2Settings.maximumScale = 1
            
            diagramm2Settings.categoryLabels = ["A", "B", "C", "D", "E", "F", "G"]
            diagramm2Settings.enabled = True

            diagramm2Renderer = QgsSingleCategoryDiagramRenderer()
            diagramm2Renderer.setDiagram(diagramm2)
            diagramm2Renderer.setDiagramSettings(diagramm2Settings)

            capaUnidam2_temp.setDiagramRenderer(diagramm2Renderer)

            diagramm2LayerSettings = QgsDiagramLayerSettings()

            ' A partir de la informacio que he tret de la consola de Python podria fer que es quedessin estàtics els diagrames '

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyVisibilitat = QgsProperty()
            propertyVisibilitat.setExpressionString("""CASE WHEN "Totalm2" = 0 THEN False WHEN "Totalm2" IS NULL THEN False ELSE True END """)
            propertyVisibilitat.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(3, propertyx)
            propertyCollection.setProperty(4, propertyy)
            propertyCollection.setProperty(9, propertyVisibilitat)

            diagramm2LayerSettings.setDataDefinedProperties(propertyCollection)

            capaUnidam2_temp.setDiagramLayerSettings(diagramm2LayerSettings)

            single_symbol_renderer_m2 = capaUnidam2_temp.renderer().clone()
            symbol_m2 = single_symbol_renderer_m2.symbol()
            symbol_layer_m2 = QgsSimpleLineSymbolLayer()
            symbol_layer_m2.setWidth(0)
            capaUnidam2_temp.setRenderer(single_symbol_renderer_m2)

            capaUnidam2_temp.triggerRepaint()
            QApplication.processEvents()
        
        QgsProject.instance().reloadAllLayers()

        self.updateProgress(70)

        ''' Etiquetes de mitjana, mediana i moda '''


        if self.dlg.checkMitjana.isChecked():
            labelMitjana = QgsPalLayerSettings()
            labelMitjana.enabled = True

            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                if consum:
                    labelMitjana.fieldName = """
                    CASE
                        WHEN "INDEX_consums_hab" IS NOT NULL AND "INDEX_consums_hab" > 0 THEN '<div><b><font color="black">' || format_number("INDEX_consums_hab", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
                if emissions:
                    labelMitjana.fieldName = """
                    CASE
                        WHEN "INDEX_emissions_hab" IS NOT NULL AND "INDEX_emissions_hab" > 0 THEN '<div><b><font color="black">' || format_number("INDEX_emissions_hab", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
            if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                if consum:
                    labelMitjana.fieldName = """
                    CASE
                        WHEN "INDEX_consum" IS NOT NULL AND "INDEX_consum" > 0 THEN '<div><b><font color="black">' || format_number("INDEX_consum", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
                if emissions:
                    labelMitjana.fieldName = """
                    CASE
                        WHEN "INDEX_emissions" IS NOT NULL AND "INDEX_emissions" > 0 THEN '<div><b><font color="black">' || format_number("INDEX_emissions", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
            labelMitjana.isExpression = True
            labelMitjana.placement = QgsPalLayerSettings.AroundPoint

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)

            ' Nou renderer '

            if consum:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    symbology = QgsGraduatedSymbolRenderer("INDEX_consums_hab", ranges.values())
                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                    symbology = QgsGraduatedSymbolRenderer("INDEX_consum", ranges.values())

                symbolA = QgsFillSymbol()
                symbolA.setColor(colors["colorA"])
                symbolB = QgsFillSymbol()
                symbolB.setColor(colors["colorB"])
                symbolC = QgsFillSymbol()
                symbolC.setColor(colors["colorC"])
                symbolD = QgsFillSymbol()
                symbolD.setColor(colors["colorD"])
                symbolE = QgsFillSymbol()
                symbolE.setColor(colors["colorE"])
                symbolF = QgsFillSymbol()
                symbolF.setColor(colors["colorF"])
                symbolG = QgsFillSymbol()
                symbolG.setColor(colors["colorG"])

                symbology.updateRangeSymbol(0, symbolA)
                symbology.updateRangeSymbol(1, symbolB)
                symbology.updateRangeSymbol(2, symbolC)
                symbology.updateRangeSymbol(3, symbolD)
                symbology.updateRangeSymbol(4, symbolE)
                symbology.updateRangeSymbol(5, symbolF)
                symbology.updateRangeSymbol(6, symbolG)
            
            if emissions:
                if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                    symbology = QgsGraduatedSymbolRenderer("INDEX_emissions_hab", ranges.values())
                if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                    symbology = QgsGraduatedSymbolRenderer("INDEX_emissions", ranges.values())

                symbolA = QgsFillSymbol()
                symbolA.setColor(colors["colorA"])
                symbolB = QgsFillSymbol()
                symbolB.setColor(colors["colorB"])
                symbolC = QgsFillSymbol()
                symbolC.setColor(colors["colorC"])
                symbolD = QgsFillSymbol()
                symbolD.setColor(colors["colorD"])
                symbolE = QgsFillSymbol()
                symbolE.setColor(colors["colorE"])
                symbolF = QgsFillSymbol()
                symbolF.setColor(colors["colorF"])
                symbolG = QgsFillSymbol()
                symbolG.setColor(colors["colorG"])

                symbology.updateRangeSymbol(0, symbolA)
                symbology.updateRangeSymbol(1, symbolB)
                symbology.updateRangeSymbol(2, symbolC)
                symbology.updateRangeSymbol(3, symbolD)
                symbology.updateRangeSymbol(4, symbolE)
                symbology.updateRangeSymbol(5, symbolF)
                symbology.updateRangeSymbol(6, symbolG)

            labelMitjana.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelMitjana.setDataDefinedProperties(propertyCollection)

            if entitat == llistaEntitats[1]: # parcel
                labelMitjana.minimumScale = 500
                labelMitjana.maximumScale = 1
            if entitat == llistaEntitats[2]: # illes
                labelMitjana.minimumScale = 4000
                labelMitjana.maximumScale = 1
            if entitat == llistaEntitats[3]: # seccions
                labelMitjana.minimumScale = 10000
                labelMitjana.maximumScale = 1
            if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]: # barris districtespostals i districtes
                labelMitjana.minimumScale = 40000
                labelMitjana.maximumScale = 1
            
            labelMitjana.scaleVisibility = True

            entitatLayerResumMitjana.setLabeling(QgsVectorLayerSimpleLabeling(labelMitjana))
            entitatLayerResumMitjana.setLabelsEnabled(True)
            entitatLayerResumMitjana.setRenderer(symbology)
            entitatLayerResumMitjana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMitjana)
            QApplication.processEvents()
        
        if self.dlg.checkModa.isChecked():

            labelModa = QgsPalLayerSettings()
            labelModa.enabled = True
            
            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                if consum:
                    labelModa.fieldName = """
                    CASE
                        WHEN "indexMODAhabConsum" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMODAhabConsum", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
                if emissions:
                    labelModa.fieldName = """
                    CASE
                        WHEN "indexMODAhabEmissions" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMODAhabEmissions", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
            if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                if consum:
                    labelModa.fieldName = """
                    CASE
                        WHEN "indexMODAsupConsum" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMODAsupConsum", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
                if emissions:
                    labelModa.fieldName = """
                    CASE
                        WHEN "indexMODAsupEmissions" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMODAsupEmissions", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """

            labelModa.isExpression = True
            labelModa.placement = QgsPalLayerSettings.AroundPoint

            ''' * FORMAT DEL TEXT * '''

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            ''' * FORMAT DEL FONS DEL TEXT * '''

            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)

            ''' * FORMAT DE LA SIMBOLOGIA DEL LAYER * '''

            symbology = QgsCategorizedSymbolRenderer()

            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                symbology.setClassAttribute("QualifMaxFreq")
                if consum:
                    symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                    symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                    symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (kWh/m²any)"))
                if emissions: 
                    symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                    symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#707070")))
                    symbology.addCategory(QgsRendererCategory("xxx", symbol, "Emissions (kgCO₂/m²any)"))
                
                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorA"]))
                symbology.addCategory(QgsRendererCategory("A", symbol, "A"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorB"]))
                symbology.addCategory(QgsRendererCategory("B", symbol, "B"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorC"]))
                symbology.addCategory(QgsRendererCategory("C", symbol, "C"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorD"]))
                symbology.addCategory(QgsRendererCategory("D", symbol, "D"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorE"]))
                symbology.addCategory(QgsRendererCategory("E", symbol, "E"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorF"]))
                symbology.addCategory(QgsRendererCategory("F", symbol, "F"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorG"]))
                symbology.addCategory(QgsRendererCategory("G", symbol, "G"))

            if self.dlg.checkm2.isChecked() or (self.dlg.checkNumHabit.isChecked() and self.dlg.checkm2.isChecked()):
                symbology.setClassAttribute("QualifMaxSup")
                if consum:
                    symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                    symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
                    symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (kWh/m²any)"))
                if emissions: 
                    symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                    symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#707070")))
                    symbology.addCategory(QgsRendererCategory("xxx", symbol, "Emissions (kgCO₂/m²any)"))
                
                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorA"]))
                symbology.addCategory(QgsRendererCategory("A", symbol, "A"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorB"]))
                symbology.addCategory(QgsRendererCategory("B", symbol, "B"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorC"]))
                symbology.addCategory(QgsRendererCategory("C", symbol, "C"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorD"]))
                symbology.addCategory(QgsRendererCategory("D", symbol, "D"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorE"]))
                symbology.addCategory(QgsRendererCategory("E", symbol, "E"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorF"]))
                symbology.addCategory(QgsRendererCategory("F", symbol, "F"))

                symbol = QgsSymbol.defaultSymbol(entitatLayerResumModa.geometryType())
                symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(colors["colorG"]))
                symbology.addCategory(QgsRendererCategory("G", symbol, "G"))

            labelModa.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelModa.setDataDefinedProperties(propertyCollection)

            if entitat == llistaEntitats[1]: # parcel
                labelModa.minimumScale = 500
                labelModa.maximumScale = 1
            if entitat == llistaEntitats[2]: # illes
                labelModa.minimumScale = 4000
                labelModa.maximumScale = 1
            if entitat == llistaEntitats[3]: # seccions
                labelModa.minimumScale = 10000
                labelModa.maximumScale = 1
            if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]: # barris districtespostals i districtes
                labelModa.minimumScale = 40000
                labelModa.maximumScale = 1

            labelModa.scaleVisibility = True

            entitatLayerResumModa.setLabeling(QgsVectorLayerSimpleLabeling(labelModa))
            entitatLayerResumModa.setLabelsEnabled(True)
            entitatLayerResumModa.setRenderer(symbology)
            entitatLayerResumModa.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumModa)
            QApplication.processEvents()

        if self.dlg.checkMediana.isChecked():
            
            labelMediana = QgsPalLayerSettings()
            labelMediana.enabled = True
            if self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked():
                if consum:
                    labelMediana.fieldName = """
                    CASE
                        WHEN "indexMEDIANAconsum" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMEDIANAconsum", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
                if emissions:
                    labelMediana.fieldName = """
                    CASE
                        WHEN "indexMEDIANAemissions" IS NOT NULL THEN '<div><b><font color="black">' || format_number("indexMEDIANAemissions", 1) || '</font></b></div>'
                        ELSE ''
                    END
                    """
            labelMediana.isExpression = True
            labelMediana.placement = QgsPalLayerSettings.AroundPoint

            text_format = QgsTextFormat()
            text_format.setAllowHtmlFormatting(True)

            background_format = QgsTextBackgroundSettings()
            background_format.setEnabled(True)
            background_format.setType(QgsTextBackgroundSettings.ShapeRectangle)
            background_format.setSizeType(QgsTextBackgroundSettings.SizeBuffer)
            background_format.setSizeUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setSize(QSizeF(3, 3))
            background_format.setRadiiUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setRadii(QSizeF(3, 3))
            background_format.setFillColor(QColor("#ffffff"))
            background_format.setStrokeColor(QColor("#808080"))
            background_format.setStrokeWidthUnit(QgsUnitTypes.RenderMillimeters)
            background_format.setStrokeWidth(1)

            text_format.setBackground(background_format)

            if consum:
                symbology = QgsGraduatedSymbolRenderer("indexMEDIANAconsum", ranges.values())
            if emissions:
                symbology = QgsGraduatedSymbolRenderer("indexMEDIANAemissions", ranges.values())
            
            symbolA = QgsFillSymbol()
            symbolA.setColor(colors["colorA"])
            symbolB = QgsFillSymbol()
            symbolB.setColor(colors["colorB"])
            symbolC = QgsFillSymbol()
            symbolC.setColor(colors["colorC"])
            symbolD = QgsFillSymbol()
            symbolD.setColor(colors["colorD"])
            symbolE = QgsFillSymbol()
            symbolE.setColor(colors["colorE"])
            symbolF = QgsFillSymbol()
            symbolF.setColor(colors["colorF"])
            symbolG = QgsFillSymbol()
            symbolG.setColor(colors["colorG"])

            symbology.updateRangeSymbol(0, symbolA)
            symbology.updateRangeSymbol(1, symbolB)
            symbology.updateRangeSymbol(2, symbolC)
            symbology.updateRangeSymbol(3, symbolD)
            symbology.updateRangeSymbol(4, symbolE)
            symbology.updateRangeSymbol(5, symbolF)
            symbology.updateRangeSymbol(6, symbolG)


            '''symbology = QgsCategorizedSymbolRenderer()
            symbology.setClassAttribute("QualifMaxSup")

            symbol = QgsSymbol.defaultSymbol(entitatLayerResumMediana.geometryType())
            symbol.changeSymbolLayer(0, QgsSimpleFillSymbolLayer(QColor("#000000")))
            if consum:
                symbology.addCategory(QgsRendererCategory("xxx", symbol, "Consum (kWh/m²any)"))
            if emissions:
                symbology.addCategory(QgsRendererCategory("xxx", symbol, "Emissions (kgCO₂/m²any)"))

            symbology.addCategory(QgsRendererCategory("A", symbols["symbolA"], "A"))
            symbology.addCategory(QgsRendererCategory("B", symbols["symbolB"], "B"))
            symbology.addCategory(QgsRendererCategory("C", symbols["symbolC"], "C"))
            symbology.addCategory(QgsRendererCategory("D", symbols["symbolD"], "D"))
            symbology.addCategory(QgsRendererCategory("E", symbols["symbolE"], "E"))
            symbology.addCategory(QgsRendererCategory("F", symbols["symbolF"], "F"))
            symbology.addCategory(QgsRendererCategory("G", symbols["symbolG"], "G"))'''

            labelMediana.setFormat(text_format)

            propertyx = QgsProperty()
            propertyx.setExpressionString("x(centroid($geometry))")
            propertyx.setActive(True)

            propertyy = QgsProperty()
            propertyy.setExpressionString("y(centroid($geometry))")
            propertyy.setActive(True)

            propertyCollection = QgsPropertyCollection("Coordenades")
            propertyCollection.setProperty(9, propertyx)
            propertyCollection.setProperty(10, propertyy)

            labelMediana.setDataDefinedProperties(propertyCollection)

            if entitat == llistaEntitats[1]: # parcel
                labelMediana.minimumScale = 500
                labelMediana.maximumScale = 1
            if entitat == llistaEntitats[2]: # illes
                labelMediana.minimumScale = 4000
                labelMediana.maximumScale = 1
            if entitat == llistaEntitats[3]: # seccions
                labelMediana.minimumScale = 10000
                labelMediana.maximumScale = 1
            if entitat == llistaEntitats[4] or entitat == llistaEntitats[5] or entitat == llistaEntitats[6]: # barris districtespostals i districtes
                labelMediana.minimumScale = 40000
                labelMediana.maximumScale = 1
            
            labelMediana.scaleVisibility = True

            entitatLayerResumMediana.setLabeling(QgsVectorLayerSimpleLabeling(labelMediana))
            entitatLayerResumMediana.setLabelsEnabled(True)
            entitatLayerResumMediana.setRenderer(symbology)
            entitatLayerResumMediana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMediana)
            QApplication.processEvents()

        QgsProject.instance().reloadAllLayers()
        self.updateProgress(80)
        self.dropFinalCapesIColumnes()
        self.updateProgress(90)
        textBox += f"PROCÉS FINALITZAT!\n"
        self.dlg.textEstat.setText(textBox)
        self.scroll_text()
        self.dlg.setEnabled(True)
        self.dlg.groupBD.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.groupEntitats.setEnabled(True)
        self.updateProgress(100)
        self.estatFinalitzat()
        QMessageBox.information(None, "Procés finalitzat", f"El procés per a l'entitat {entitat} ha finalitzat.", QMessageBox.Ok)
        QApplication.processEvents()

    def populateComboBox(self, combo, list, predef, sort):
        """Procediment per omplir el combo especificat amb la llista subministrada"""
        combo.blockSignals(True)
        combo.clear()
        model = QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CCU'),
                action)
            #self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.estatInicial()
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboBD, conn, 'Selecciona connexió', True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
