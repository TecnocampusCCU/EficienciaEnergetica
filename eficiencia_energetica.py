# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EficEnerg
                                 A QGIS plugin
 efic energ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Miquel Rodriguez
        email                : mrodriguezj@edu.tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   Per implementar encara [TODO] :                                       *
 *   - Canviar la moda perquè es calculi també per al nombre d'habitatges, *
 *     no només per als metres quadrats.                                   *
 *   - Canviar plugin per a fer les operaciones per a una sola entitat     *
 *     i no per a les 5 entitats a la vegada.                              *
 *   - Fer la llegenda al mapa pels colors dels diagrames de pastís.       *
 *   - Al finalitzar tot, escriure un manual d'usuari del plugin.          *
 *                                                                         *
 ***************************************************************************/
 
"""


import collections
import datetime
import os
import os.path
import sys
import time
import unicodedata
from os.path import expanduser

import processing
import psycopg2
import qgis.utils
from PyQt5.QtCore import *
from PyQt5.QtCore import QSizeF
from PyQt5.QtGui import *
from PyQt5.QtGui import QColor
from PyQt5.QtSql import *
from PyQt5.QtWidgets import QAction, QApplication, QMessageBox
from qgis.core import (QgsCoordinateReferenceSystem, QgsDataDefinedSizeLegend,
                       QgsDataSourceUri, QgsDiagram, QgsDiagramLayerSettings,
                       QgsDiagramRenderer, QgsDiagramSettings, QgsFeature,
                       QgsFeatureRenderer, QgsFeatureRequest, QgsField,
                       QgsGeometry, QgsLinearlyInterpolatedDiagramRenderer,
                       QgsMapLayer, QgsPalLayerSettings, QgsPieDiagram,
                       QgsProcessingException, QgsProject,
                       QgsSingleSymbolRenderer, QgsSymbol, QgsTextFormat,
                       QgsUnitTypes, QgsVectorLayer, QgsVectorLayerExporter,
                       QgsVectorLayerSimpleLabeling, QgsVectorLayerUtils,
                       QgsWkbTypes)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QMessageBox
from qgis.utils import iface

# Import the code for the dialog
from .eficiencia_energetica_dialog import EficEnergDialog
# Initialize Qt resources from file resources.py
from .resources import *

'''Varibles globals'''
Versio_modul = "V_Q3.230720"
nomBD1 = ""
password1 = ""
host1 = ""
port1 = ""
user1 = ""
schema1 = ""
cur = None
conn = None
progress = None
aux = False
textBox = ""
uri = None
numOperacions = 0
numEntitats = 0

habitatges = None
habitatgesLayer = None
entitat = None
entitatLayer = None
entitatLayerJoined = None
entitatLayerResumNumHabit = None
entitatLayerResumm2 = None
entitatLayerResumMitjana = None
entitatLayerResumModa = None
entitatLayerResumMediana = None

class EficEnerg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EficEnerg_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Create the dialog and keep reference

        self.dlg = EficEnergDialog()
        
        self.dlg.pushSortir.clicked.connect(self.on_click_Sortir)
        self.dlg.pushInici.clicked.connect(self.on_click_Inici)
        self.dlg.comboBD.currentIndexChanged.connect(self.on_change_ComboConn)
        self.dlg.comboSchema.currentIndexChanged.connect(self.on_change_comboSchema)
        self.dlg.comboHabitatges.currentIndexChanged.connect(self.on_change_comboHabitatges)
        self.dlg.comboEntitat.currentIndexChanged.connect(self.on_change_comboEntitat)
        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_checkNumHabit)
        self.dlg.checkm2.stateChanged.connect(self.on_change_checkm2)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_checkMitjana)
        self.dlg.checkModa.stateChanged.connect(self.on_change_checkModa)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_checkMediana)

        self.dlg.checkNumHabit.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkm2.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMitjana.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkModa.stateChanged.connect(self.on_change_entitatsIOperacions)
        self.dlg.checkMediana.stateChanged.connect(self.on_change_entitatsIOperacions)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Eficiencia Energetica')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EficEnerg', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/eficiencia_energetica/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def on_change_ComboConn(self):
        global aux
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global schema1
        global cur
        global conn
        global textBox
        global uri
        s = QSettings()
        self.dlg.comboHabitatges.clear()
        self.dlg.comboEntitat.clear()
        select = 'Selecciona connexió'
        nom_conn = self.dlg.comboBD.currentText()

        if nom_conn != select:
            aux = True
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()

            nomBD1 = s.value("database", "")
            password1 = s.value("password", "")
            host1 = s.value("host", "")
            port1 = s.value("port", "")
            user1 = s.value("username", "")
            schema1 = s.value("schema", "")

            self.barraEstat_connectant()
            textBox += f"\nConnectant a la base de dades {nomBD1}...\n"
            self.dlg.textEstat.setText(textBox)
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            # Connexio
            nomBD = nomBD1.encode('ascii', 'ignore')
            user = user1.encode('ascii', 'ignore')
            server = host1.encode('ascii', 'ignore')
            password = password1.encode('ascii', 'ignore')
            #schema = schema1.encode('ascii', 'ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + user.decode("utf-8") +"' host='" + server.decode("utf-8") +"' password='" + password.decode("utf-8") + "'" # + "'schema='" + schema.decode("utf-8") + "'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                textBox += f"\nConnectat a la base de dades {nomBD1}\n"
                textBox += "\nSelecciona les entitats amb les que vulguis treballar i indica amb quines entitats treballaràs així com els camps que vols calcular i inicia el procés"
                self.dlg.textEstat.setText(textBox)
                cur = conn.cursor()
                schemas = self.getSchemas()
                self.populateComboBox(self.dlg.comboSchema, schemas, "Selecciona un esquema", True)
                self.dlg.comboSchema.setEnabled(True)
                uri = QgsDataSourceUri()
                uri.setConnection(host1, port1, nomBD1, user1, password1)
                self.dlg.labelSchema.setVisible(True)
                self.dlg.comboSchema.setVisible(True)

            except Exception as ex:
                self.estatInicial()
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                if conn is not None:
                    conn.rollback()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                return
            
        else:
            aux = False
            self.barraEstat_noConnectat()

    def on_change_comboSchema(self):
        global schema1
        schema1 = self.dlg.comboSchema.currentText()

        self.dlg.groupEntitats.setEnabled(True)
        self.dlg.comboHabitatges.setEnabled(True)
        self.dlg.comboEntitat.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.pushInici.setEnabled(True)

        self.dlg.groupEntitats.setVisible(True)
        self.dlg.labelHabitatges.setVisible(True)
        self.dlg.comboHabitatges.setVisible(True)
        self.dlg.groupChecks.setVisible(True)

        layers = self.getLayers(schema1)
        self.populateComboBox(self.dlg.comboHabitatges, layers, "Selecciona els habitatges", True)
        self.populateComboBox(self.dlg.comboEntitat, layers, "Selecciona l'entitat", True)
    
    def on_change_comboEntitat(self):
        global uri
        global entitat
        global entitatLayer
        entitat = self.dlg.comboEntitat.currentText()
        uri.setDataSource(schema1, entitat, 'geom')
        entitatLayer = QgsVectorLayer(uri.uri(), entitat, 'postgres')

    def on_change_comboHabitatges(self):
        global habitatges
        global habitatgesLayer
        global uri
        habitatges = self.dlg.comboHabitatges.currentText()
        uri.setDataSource(schema1, habitatges, 'geom')
        habitatgesLayer = QgsVectorLayer(uri.uri(), habitatges, 'postgres')

    def on_change_entitatsIOperacions(self):
        if numEntitats > 1 or numOperacions > 2:
            self.dlg.labelAvis.setVisible(True)
        else:
            self.dlg.labelAvis.setVisible(False)

    def on_change_checkNumHabit(self):
        global numOperacions
        if self.dlg.checkNumHabit.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkm2(self):
        global numOperacions
        if self.dlg.checkm2.isChecked():
            self.dlg.checkModa.setEnabled(True)
            numOperacions += 1
        else:
            self.dlg.checkModa.setEnabled(False)
            self.dlg.checkModa.setChecked(False)
            numOperacions -= 1
    
    def on_change_checkMitjana(self):
        global numOperacions
        if self.dlg.checkMitjana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkModa(self):
        global numOperacions
        if self.dlg.checkModa.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def on_change_checkMediana(self):
        global numOperacions
        if self.dlg.checkMediana.isChecked():
            numOperacions += 1
        else:
            numOperacions -= 1

    def ompleCombos(self, combo, llista, predef, sort):
        combo.blockSignals(True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList=None
        for elem in llista:
            try:
                if isinstance(elem, tuple):
                    item = QStandardItem(unicode(elem[0]))
                else:
                    item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem[0]))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def getConnections(self):
        '''Aquesta funció retorna les connexions que estan guardades en el projecte.'''
        s = QSettings()
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def getLayers(self, schema):
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global cur
        global conn

        sql = f"SELECT table_name FROM information_schema.tables WHERE table_schema = '{schema}' AND (table_type = 'BASE TABLE' OR table_type = 'VIEW')"
        try:
            cur.execute(sql)
            layers = [layer[0] for layer in cur.fetchall()]
        except Exception as ex:
            print("Unable to connect to database")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            print(nomBD1)
            QMessageBox.information(None, "Error", "Error canvi connexió")
            conn.rollback()
            self.dlg.comboDB.setCurrentIndex(0)
            self.dlg.setEnabled(True)
            return
        return layers
    
    def getSchemas(self):
        global nomBD1
        global password1
        global host1
        global port1
        global user1
        global cur
        global conn

        sql = f"SELECT schema_name FROM information_schema.schemata"
        try:
            cur.execute(sql)
            schemas = [schema[0] for schema in cur.fetchall()]
        except Exception as ex:
            print("Unable to connect to database")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            print(nomBD1)
            QMessageBox.information(None, "Error", "Error canvi connexió")
            conn.rollback()
            self.dlg.comboDB.setCurrentIndex(0)
            self.dlg.setEnabled(True)
            return
        return schemas

    def estatInicial(self):
        global aux
        global textBox
        global Versio_modul
        aux = False
        self.dlg.comboBD.setCurrentIndex(0)
        self.barraEstat_noConnectat()
        self.dlg.comboBD.setEnabled(True)
        self.dlg.comboSchema.setEnabled(False)
        self.dlg.comboEntitat.setEnabled(False)
        self.dlg.comboHabitatges.setEnabled(False)
        self.dlg.checkNumHabit.setChecked(False)
        self.dlg.checkm2.setChecked(False)
        self.dlg.checkMitjana.setChecked(False)
        self.dlg.checkModa.setChecked(False)
        self.dlg.checkMediana.setChecked(False)
        self.dlg.comboEntitat.clear()
        self.dlg.comboHabitatges.clear()
        self.dlg.textEstat.clear()
        self.dlg.versio.setText(Versio_modul)
        self.dlg.groupEntitats.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.pushInici.setEnabled(False)
        self.dlg.groupChecks.setVisible(False)
        self.dlg.groupEntitats.setVisible(False)
        self.dlg.labelHabitatges.setVisible(False)
        self.dlg.comboHabitatges.setVisible(False)
        self.dlg.labelEntitat.setVisible(False)
        self.dlg.comboEntitat.setVisible(False)
        self.dlg.labelSchema.setVisible(False)
        self.dlg.comboSchema.setVisible(False)
        self.dlg.checkModa.setEnabled(False)
        self.dlg.labelAvis.setVisible(False)
        textBox = "Selecciona una base de dades...\n"
        self.dlg.textEstat.setText(textBox)
        self.dlg.setEnabled(True)
    
    def estatFinalitzat(self):
        self.dlg.comboBD.setEnabled(False)
        self.dlg.comboSchema.setEnabled(False)
        self.dlg.comboHabitatges.setEnabled(False)
        self.dlg.comboEntitat.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.pushInici.setEnabled(False)
        self.dlg.pushSortir.setEnabled(True)
        self.dlg.labelAvis.setVisible(False)

    def crearCopiesCapesEntitats(self, entitatParam):
        global habitatgesLayer
        global entitatLayer
        
        try:
            copy_table_name = f"{entitatParam}_copy"
            drop_table_query = f'DROP TABLE IF EXISTS "{schema1}"."{copy_table_name}"'
            cur.execute(drop_table_query)
            create_table_query = f'CREATE TABLE "{schema1}"."{copy_table_name}" (LIKE "{schema1}"."{entitatParam}" INCLUDING CONSTRAINTS)'
            cur.execute(create_table_query)
            insert_features_query = f'INSERT INTO "{schema1}"."{copy_table_name}" SELECT * FROM "{schema1}"."{entitatParam}"'
            cur.execute(insert_features_query)
            conn.commit()

        except Exception as ex:
            print ("Error a creació de capes copia")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes copia")
            conn.rollback()
            return

        uri.setDataSource(schema1, f"{copy_table_name}", 'geom')

        if (entitatParam == habitatges):
            habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{copy_table_name}"', 'postgres')
        if entitatParam == entitat:
            entitatLayer = QgsVectorLayer(uri.uri(), f'"{copy_table_name}"', 'postgres')
        else:
            return

    def crearIDentitats(self):
        global habitatgesLayer
        '''Funcio per calcular els ID de les entitats que es combinaran amb els habitatges'''
        sql = f'ALTER TABLE "{schema1}"."{habitatges}_copy" DROP COLUMN IF EXISTS "{entitat}_id";\n'
        cur.execute(sql)
        conn.commit()

        try:
            sql = f'ALTER TABLE "{schema1}"."{habitatges}_copy" ADD COLUMN "{entitat}_id" INTEGER;\n'
            sql += f'UPDATE "{schema1}"."{habitatges}_copy" SET "{entitat}_id" = "{schema1}"."{entitat}_copy".id_0 FROM "{schema1}"."{entitat}_copy" WHERE ST_Intersects("{schema1}"."{habitatges}_copy".geom, "{schema1}"."{entitat}_copy".geom);'
            cur.execute(sql)
            conn.commit()

            uri.setDataSource(schema1, f"{habitatges}_copy", 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{habitatges}_copy"', 'postgres')
        except Exception as ex:
            print ("Error calculant ID auxiliars entitats")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error calculant ID auxiliars entitats")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calcularCampsHabitatges(self):
        global habitatges
        global habitatgesLayer
        
        sql = f'ALTER TABLE "{schema1}"."{habitatges}_copy" DROP COLUMN IF EXISTS "producte_con";\n'
        sql += f'ALTER TABLE "{schema1}"."{habitatges}_copy" DROP COLUMN IF EXISTS "producte_emi";'
        cur.execute(sql)
        conn.commit()

        try:
            sql = f'ALTER TABLE "{schema1}"."{habitatges}_copy" ADD COLUMN "producte_con" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."{habitatges}_copy" SET "producte_con" = CAST("energia primària no renovable" AS FLOAT) * CAST("metres_cadastre" AS FLOAT);\n'
            
            sql += f'ALTER TABLE "{schema1}"."{habitatges}_copy" ADD COLUMN "producte_emi" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."{habitatges}_copy" SET "producte_emi" = CAST("emissions de co2" AS FLOAT) * CAST("metres_cadastre" AS FLOAT);'

            cur.execute(sql)
            conn.commit()    

            uri.setDataSource(schema1, f"{habitatges}_copy", 'geom')
            habitatgesLayer = QgsVectorLayer(uri.uri(), f'"{habitatges}_copy"', 'postgres')    
        except Exception as ex:
            print ("Error calculant camps auxiliars habitatges")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error calculant camps auxiliars habitatges")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calculNumX(self):

        ''' Drop de les columnes en cas d'existir '''
        try:
            drop = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumA";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumB";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumC";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumD";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumE";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumF";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "NumG";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "TotalEE";'
            cur.execute(drop)
            conn.commit()
        except Exception as ex:
            print ("Error dropping NumX columns")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error dropping NumX columns")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        '''Calcul de les diferents columnes NumA, NumB, ..., NumG i TotalEE'''
        
        try:
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumA" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumA" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumB" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumB" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumC" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumC" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumD" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumD" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumE" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumE" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumF" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumF" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "NumG" integer;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "NumG" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN 1 ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "TotalEE" integer;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "TotalEE" = "NumA" + "NumB" + "NumC" + "NumD" + "NumE" + "NumF" + "NumG";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error calculating NumX columns")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error calculating NumX columns")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
    
    def calculm2(self):
        '''Drop de les columnes en cas d'existir'''
        try:
            drop = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2A";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2B";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2C";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2D";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2E";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2F";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "m2G";\n'
            drop += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" DROP COLUMN IF EXISTS "Totalm2";'
            cur.execute(drop)
            conn.commit()
        except Exception as ex:
            print ("Error dropping m2X columns")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error dropping m2X columns")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        '''Calcul m2A, m2B, ..., m2G, Totalm2'''
        
        try:
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2A" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2A" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'A' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2B" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2B" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'B' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2C" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2C" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'C' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2D" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2D" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'D' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2E" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2E" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'E' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2F" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2F" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'F' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "m2G" float;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "m2G" = subquery.sum_count FROM (SELECT "id_0", SUM(CASE WHEN "qualificació de consum energia primaria no renovable" = 'G' THEN CAST(metres_cadastre AS float) ELSE 0 END) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "Totalm2" float;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "Totalm2" = "m2A" + "m2B" + "m2C" + "m2D" + "m2E" + "m2F" + "m2G";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error calculating m2X columns")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error calculating m2X columns")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calculMitjana(self):
        try:
            ''' Sumatoris '''
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "sum_product_consums" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "sum_product_consums" = subquery.sum_count FROM (SELECT "id_0", SUM(CAST("producte_con" AS FLOAT)) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "sum_product_emissions" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "sum_product_emissions" = subquery.sum_count FROM (SELECT "id_0", SUM(CAST("producte_emi" AS FLOAT)) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n'
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "sum_m2" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "sum_m2" = subquery.sum_count FROM (SELECT "id_0", SUM(CAST("metres_cadastre" AS FLOAT)) AS sum_count FROM "{schema1}"."Capa unida {entitat}" GROUP BY "id_0") AS subquery WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";'
            cur.execute(sql)
            conn.commit()
            ''' Crear indexs (que son camps nous a la taula unida) '''
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "INDEX_consum" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "INDEX_consum" = CASE WHEN "sum_m2" = 0 THEN 0 ELSE ("sum_product_consums"/"sum_m2") END;\n'
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "INDEX_emissions" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "INDEX_emissions" = CASE WHEN "sum_m2" = 0 THEN 0 ELSE ("sum_product_emissions"/"sum_m2") END;'
            cur.execute(sql)
            conn.commit()

        except Exception as ex:
            print ("Error fent sumes de camps de la mitjana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error fent sumes de camps de la mitjana")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calculModa(self):
        try:
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "maxConsum" FLOAT;\n'
            sql += f'UPDATE "{schema1}"."Capa unida {entitat}" SET "maxConsum" = GREATEST("m2A", "m2B", "m2C", "m2D", "m2E", "m2F", "m2G");\n'
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "QualifMaxSup" VARCHAR;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" SET "QualifMaxSup" =  
	            CASE 
		            WHEN "maxConsum" = "m2A" THEN 'A' 
		            WHEN "maxConsum" = "m2B" THEN 'B' 
		            WHEN "maxConsum" = "m2C" THEN 'C' 
		            WHEN "maxConsum" = "m2D" THEN 'D' 
		            WHEN "maxConsum" = "m2E" THEN 'E' 
		            WHEN "maxConsum" = "m2F" THEN 'F' 
		            ELSE 'G' 
	            END;
            '''
            cur.execute(sql)
            conn.commit()

            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "indexMODAsup" FLOAT;\n'
            sql += f'''
            UPDATE "{schema1}"."Capa unida {entitat}" AS c
            SET "indexMODAsup" = subquery.moda
            FROM (
                SELECT "id_0",
                    (
                        SUM (
                            CASE
                                WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                    THEN CAST("energia primària no renovable" AS FLOAT)
                                ELSE 0
                            END
                        ) / NULLIF(SUM (
                            CASE
                                WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                    THEN 1
                                ELSE 0
                            END), 0
                        )
                    ) AS moda
                FROM {schema1}."Capa unida {entitat}"
                GROUP BY "id_0"
            ) AS subquery
            WHERE c."id_0" = subquery."id_0"\n;
            '''

            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "indexMODAsupPonderat" FLOAT;\n'
            sql += f'''
            UPDATE "{schema1}"."Capa unida {entitat}" AS c
            SET "indexMODAsupPonderat" = subquery.moda
            FROM (
                SELECT "id_0",
                    (
                        SUM (
                            CASE
                                WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                    THEN CAST("energia primària no renovable" AS FLOAT) * CAST("metres_cadastre" AS FLOAT)
                                ELSE 0
                            END
                        ) / NULLIF(SUM (
                            CASE
                                WHEN "qualificació de consum energia primaria no renovable" = "QualifMaxSup"
                                    THEN CAST("metres_cadastre" AS FLOAT)
                                ELSE 0
                            END), 0
                        )
                    ) AS moda
                FROM {schema1}."Capa unida {entitat}"
                GROUP BY "id_0"
            ) AS subquery
            WHERE c."id_0" = subquery."id_0";
            '''
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error fent calcul moda")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error fent calcul moda")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

    def calculMediana(self):
        try:
            ''' El primer que cal fer per a la mediana és desfer-se de totes les files que tenen valor 0 a producte_con i producte_emi '''
            sql = f'DELETE FROM "{schema1}"."Capa unida {entitat}" WHERE "producte_con" = 0 OR "producte_con" IS NULL;\n'
            sql += f'DELETE FROM "{schema1}"."Capa unida {entitat}" WHERE "producte_emi" = 0 OR "producte_emi" IS NULL;\n'
            sql += f'DELETE FROM "{schema1}"."Capa unida {entitat}" WHERE "id_0" IS NULL;'
            cur.execute(sql)
            conn.commit()

            ''' Ara cal calcular el index de la mediana '''

            
            sql = f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "INDEX_mediana_consum" FLOAT;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" 
                        SET "INDEX_mediana_consum" = 
                            CASE 
                                WHEN CAST("energia primària no renovable" AS FLOAT) IS NULL OR CAST("energia primària no renovable" AS FLOAT) = 0 THEN NULL
                                ELSE subquery.median
                            END
                            FROM (
                                SELECT "id_0",
                                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("energia primària no renovable" AS FLOAT)) 
                                AS median FROM "{schema1}"."Capa unida {entitat}"
                                GROUP BY "id_0"
                            ) 
                        AS subquery
                        WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";\n
                    '''
            sql += f'ALTER TABLE "{schema1}"."Capa unida {entitat}" ADD COLUMN "INDEX_mediana_emissions" FLOAT;\n'
            sql += f'''UPDATE "{schema1}"."Capa unida {entitat}" 
                        SET "INDEX_mediana_emissions" = 
                            CASE 
                                WHEN CAST("emissions de co2" AS FLOAT) IS NULL OR CAST("emissions de co2" AS FLOAT) = 0 THEN NULL
                                ELSE subquery.median
                            END
                            FROM (
                                SELECT "id_0",
                                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CAST("emissions de co2" AS FLOAT)) 
                                AS median FROM "{schema1}"."Capa unida {entitat}"
                                GROUP BY "id_0"
                            ) 
                        AS subquery
                        WHERE "{schema1}"."Capa unida {entitat}"."id_0" = subquery."id_0";
                    '''
                
            cur.execute(sql)
            conn.commit()
            
        except Exception as ex:
            print ("Error fent mediana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error fent mediana")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
    def dropCapesUnides(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Capa unida {entitat}";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table if exists de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table if exists de capes unides")
            conn.rollback()
            return
    
    def dropCapesReUnidesNumHabit(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteNumHabit";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte NumHabit")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table resum recompte NumHabit")
            conn.rollback()
            return
        
    def dropCapesReUnidesm2(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}Recomptem2";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte m2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table resum recompte m2")
            conn.rollback()
            return
        
    def dropCapesReUnidesMitjana(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteMitjana";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte mitjana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table resum recompte mitjana")
            conn.rollback()
            return
        
    def dropCapesReUnidesModa(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteModa";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte moda")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table resum recompte moda")
            conn.rollback()
            return

    def dropCapesReUnidesMediana(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteMediana";'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error a drop table resum recompte mediana")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a drop table resum recompte mediana")
            conn.rollback()
            return

    def unirCapes(self):
        global uri
        global entitatLayerJoined

        alg_params = {
            "INPUT": entitatLayer,
            "FIELD": "id_0",
            "INPUT_2": habitatgesLayer,
            "FIELD_2": f"{entitat}_id",
            "FIELDS_TO_COPY": ["referencia cadastral", "metres_cadastre", "qualificació de consum energia primaria no renovable", "energia primària no renovable", "qualificacio emissions de co2", "emissions de co2", "producte_con", "producte_emi"],
            "METHOD": 0,
            "OUTPUT": 'memory:'
        }
        result = processing.run("native:joinattributestable", alg_params)

        capa_unida = result["OUTPUT"]
        layerEntitat = capa_unida
        if not layerEntitat.isValid():
            print("ERROR LAYER UNIT")
            return
        layerEntitat.setName(f"Capa unida {entitat}")
        layerEntitat.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Capa unida {entitat}" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerEntitat.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerEntitat.crs(), overwrite=True)
            exporter.addFeatures(layerEntitat.getFeatures())
            QApplication.processEvents()


        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def carregarCapesMapa(self):
        global entitatLayerJoined

        uri.setDataSource(schema1, f"Capa unida {entitat}", 'geom')
        entitatLayerJoined = QgsVectorLayer(uri.uri(), f"Capa unida {entitat}", 'postgres')
        
        QApplication.processEvents()

    def reUnirCapesNumHabit(self):
        global entitatLayerResumNumHabit

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkNumHabit.isChecked():
            alg_params = {
                "INPUT": layer,
                "FIELD": "id_0",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id_0",
                "FIELDS_TO_COPY": ['NumA', 'NumB', 'NumC', 'NumD', 'NumE', 'NumF', 'NumG', 'TotalEE'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        result = processing.run("native:joinattributestable", alg_params)
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        layerResum.setName(f"Resum{entitat}RecompteNumHabit")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumNumHabit = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Resum{entitat}RecompteNumHabit" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesm2(self):
        global entitatLayerResumm2

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkm2.isChecked():
            alg_params = {
                "INPUT": layer,
                "FIELD": "id_0",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id_0",
                "FIELDS_TO_COPY": ['m2A', 'm2B', 'm2C', 'm2D', 'm2E', 'm2F', 'm2G', 'Totalm2'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        result = processing.run("native:joinattributestable", alg_params)
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        layerResum.setName(f"Resum{entitat}Recomptem2")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumm2 = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Resum{entitat}Recomptem2" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesMitjana(self):
        global entitatLayerResumMitjana

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkMitjana.isChecked():
            alg_params = {
                "INPUT": layer,
                "FIELD": "id_0",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id_0",
                "FIELDS_TO_COPY": ['INDEX_consum', 'INDEX_emissions'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        result = processing.run("native:joinattributestable", alg_params)
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        layerResum.setName(f"Resum{entitat}RecompteMitjana")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumMitjana = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Resum{entitat}RecompteMitjana" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return
        
    def reUnirCapesModa(self):
        global entitatLayerResumModa

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkModa.isChecked():
            alg_params = {
                "INPUT": layer,
                "FIELD": "id_0",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id_0",
                "FIELDS_TO_COPY": ['QualifMaxSup', 'indexMODAsup', 'indexMODAsupPonderat'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        result = processing.run("native:joinattributestable", alg_params)
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        layerResum.setName(f"Resum{entitat}RecompteModa")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumModa = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Resum{entitat}RecompteModa" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def reUnirCapesMediana(self):
        global entitatLayerResumMediana

        layer = entitatLayer
        layerEntitat = entitatLayerJoined

        global uri
        if self.dlg.checkMediana.isChecked():
            alg_params = {
                "INPUT": layer,
                "FIELD": "id_0",
                "INPUT_2": layerEntitat,
                "FIELD_2": "id_0",
                "FIELDS_TO_COPY": ['INDEX_mediana_consum', 'INDEX_mediana_emissions'],
                "METHOD": 1,
                "OUTPUT": 'memory:'
            }
        result = processing.run("native:joinattributestable", alg_params)
        resumRecompte = result["OUTPUT"]
        layerResum = resumRecompte
        if not layerResum.isValid():
            print("ERROR RESUM ENTITAT RECOMPTE")
            return
        layerResum.setName(f"Resum{entitat}RecompteMediana")
        layerResum.setCrs(QgsCoordinateReferenceSystem("EPSG:25831"))

        entitatLayerResumMediana = layerResum

        try:
            uristr=f"""
            dbname='{nomBD1}' host={host1} port={port1} user='{user1}' password='{password1}' table="{schema1}"."Resum{entitat}RecompteMediana" (geom)
            """
            exporter = QgsVectorLayerExporter(uristr, provider='postgres', fields=layerResum.fields(), geometryType=QgsWkbTypes.MultiPolygon, crs=layerResum.crs(), overwrite=True)
            exporter.addFeatures(layerResum.getFeatures())
            QApplication.processEvents()
        except Exception as ex:
            print ("Error a creació de capes unides")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a creació de capes unides")
            conn.rollback()
            return

    def dropFinalCapesIColumnes(self):
        try:
            sql = f'DROP TABLE IF EXISTS "{schema1}"."{habitatges}_copy";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."{entitat}_copy";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Capa unida {entitat}";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteNumHabit";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}Recomptem2";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteMitjana";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteModa";\n'
            sql += f'DROP TABLE IF EXISTS "{schema1}"."Resum{entitat}RecompteMediana";\n'
            cur.execute(sql)
            conn.commit()
        except Exception as ex:
            print ("Error fent drops finals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error fent drops finals")
            conn.rollback()
            self.dlg.setEnabled(True)
            return 

    def barraEstat_processant(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Processant..."'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 125, 155)')
        self.dlg.lblEstatConn.setText("Processant...")
        QApplication.processEvents()
        
    def barraEstat_noConnectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "No connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
        QApplication.processEvents()
        
    def barraEstat_connectat(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
    def barraEstat_connectant(self):
        '''Aquesta funció canvia l'aparença de la barra d'estat a "Connectant..."'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
        self.dlg.lblEstatConn.setText('Connectant...')
        QApplication.processEvents()

    def maxTotalEE(self):
        global conn
        global cur
        sql = f'''SELECT MAX("TotalEE") FROM "{schema1}"."Capa unida {entitat}";'''
        cur.execute(sql)
        return cur.fetchone()[0]

    def maxTotalm2(self):
        global conn
        global cur
        sql = f'''SELECT MAX("Totalm2"::float) FROM "{schema1}"."Capa unida {entitat}";'''
        cur.execute(sql)
        result = cur.fetchone()[0]
        if (result == None):
            return 0
        else:
            return float(result)

    def on_click_Sortir(self):
        cur.close()
        conn.close()
        self.estatInicial()
        self.dlg.close()

    def on_click_Inici(self):
        global cur
        global conn
        global textBox
        global nomBD1
        global password1
        global host1
        global user1
        global port1
        global schema1
        global uri

        global habitatges
        global habitatgesLayer
        global entitat
        global entitatLayer
        global entitatLayerJoined
        global entitatLayerResumNumHabit
        global entitatLayerResumm2
        global entitatLayerResumMitjana
        global entitatLayerResumModa
        global entitatLayerResumMediana

        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1, port1, nomBD1, user1, password1)
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a la connexio")
            conn.rollback()
            self.dlg.setEnabled(True)
            return

        if habitatges == None or habitatges=='Selecciona els habitatges':
            self.dlg.setEnabled(True)
            print ("No s'ha seleccionat cap habitici")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "No s'ha seleccionat cap habitici")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        global textBox
        self.dlg.setEnabled(False)
        self.dlg.groupBD.setEnabled(False)
        self.dlg.groupChecks.setEnabled(False)
        self.dlg.groupEntitats.setEnabled(False)
        textBox += f"\nINICIANT EL PROCÉS...\n"
        print("Comença programa")
        self.dlg.textEstat.setText(textBox)
        
        '''Control exceptions'''

        if (not self.dlg.checkNumHabit.isChecked() and not self.dlg.checkm2.isChecked() and not self.dlg.checkMitjana.isChecked() and not self.dlg.checkModa.isChecked() and not self.dlg.checkMediana.isChecked()):
            self.dlg.setEnabled(True)
            print ("No s'ha seleccionat cap operació que realitzar")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "No s'ha seleccionat cap operació que realitzar")
            conn.rollback()
            self.dlg.setEnabled(True)
            return
        
        print("No hi ha excepcions")
        ''' Crear copies capes originals '''
        self.crearCopiesCapesEntitats(habitatges)
        self.crearCopiesCapesEntitats(entitat)
        QApplication.processEvents()
        print("Fetes copies de les capes originals")

        ''' IDs Entitats '''

        textBox += f"Calculant ID d'entitats seleccionades...\n"
        self.dlg.textEstat.setText(textBox)
        self.calcularCampsHabitatges()
        self.crearIDentitats()
        QApplication.processEvents()
        print("Fetes IDs de les entitats")

        ''' Unió capes '''

        textBox += f"Unint capes seleccionades...\n"
        self.dlg.textEstat.setText(textBox)
        self.dropCapesUnides(entitat)
        self.unirCapes()
        QApplication.processEvents()
        
        ''' Processament càlculs '''

        'NumX habitatges per entitats'

        if(self.dlg.checkNumHabit.isChecked()):
            textBox += f"Calculant NumX d'habitatges...\n"
            self.dlg.textEstat.setText(textBox)
            self.calculNumX()
            QApplication.processEvents()
        
        'm2 habitatges per entitats'
        
        if(self.dlg.checkm2.isChecked()):
            textBox += f"Calculant m2 d'habitatges...\n"
            self.dlg.textEstat.setText(textBox)
            self.calculm2()
            QApplication.processEvents()    
        
        'Mitjana habitatges per entitats'

        if self.dlg.checkMitjana.isChecked():
            textBox += f"Calculant mitjana de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.calculMitjana()
            QApplication.processEvents()

        'Moda habitatges per entitats'

        if self.dlg.checkModa.isChecked():
            textBox += f"Calculant moda de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.calculModa()
            QApplication.processEvents()

        'Mediana habitatges per entitats'

        if self.dlg.checkMediana.isChecked():
            textBox += f"Calculant mediana de consum i emissions d'habitatges per entitats...\n"
            self.dlg.textEstat.setText(textBox)
            self.calculMediana()
            QApplication.processEvents()


        'Carregar capes, fer drops i tornar a unir-les per alleugerir-les'
        'per NumHabit'

        if self.dlg.checkNumHabit.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesNumHabit()
            self.reUnirCapesNumHabit()
            QApplication.processEvents()      
        
        'per m2'

        if self.dlg.checkm2.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesm2()
            self.reUnirCapesm2()
            QApplication.processEvents()

        'per mitjana'
        if self.dlg.checkMitjana.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesMitjana()
            self.reUnirCapesMitjana()
            QApplication.processEvents()

        'per moda'

        if self.dlg.checkModa.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesModa()
            self.reUnirCapesModa()
            QApplication.processEvents()

        'per mediana'

        if self.dlg.checkMediana.isChecked():
            self.carregarCapesMapa()
            self.dropCapesReUnidesMediana()
            self.reUnirCapesMediana()
            QApplication.processEvents()

        ''' Diagrames de pie chart '''

        NumDiagramColors = {
            'NumA': QColor.fromCmykF(0.85, 0.15, 0.95, 0.30),
            'NumB': QColor.fromCmykF(0.80, 0.00, 1.00, 0.00),
            'NumC': QColor.fromCmykF(0.45, 0.00, 1.00, 0.00),
            'NumD': QColor.fromCmykF(0.10, 0.00, 0.95, 0.00),
            'NumE': QColor.fromCmykF(0.05, 0.30, 1.00, 0.00),
            'NumF': QColor.fromCmykF(0.10, 0.65, 1.00, 0.00),
            'NumG': QColor.fromCmykF(0.05, 0.95, 0.95, 0.00)
        }

        m2DiagramColors = {
            'm2A': QColor.fromCmykF(0.85, 0.15, 0.95, 0.30),
            'm2B': QColor.fromCmykF(0.80, 0.00, 1.00, 0.00),
            'm2C': QColor.fromCmykF(0.45, 0.00, 1.00, 0.00),
            'm2D': QColor.fromCmykF(0.10, 0.00, 0.95, 0.00),
            'm2E': QColor.fromCmykF(0.05, 0.30, 1.00, 0.00),
            'm2F': QColor.fromCmykF(0.10, 0.65, 1.00, 0.00),
            'm2G': QColor.fromCmykF(0.05, 0.95, 0.95, 0.00)
        }

        if self.dlg.checkNumHabit.isChecked():
            uri.setDataSource(schema1, f"Resum{entitat}RecompteNumHabit", 'geom')
            capaUnidaNumHabit = QgsVectorLayer(uri.uri(), f"Resum{entitat}RecompteNumHabit", 'postgres')
            capaUnidaNumHabit_temp_features = [feat for feat in capaUnidaNumHabit.getFeatures()]
            capaUnidaNumHabit_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Resum{entitat}RecompteNumHabit", "memory")
            capaUnidaNumHabit_temp_data = capaUnidaNumHabit_temp.dataProvider()
            attributes = capaUnidaNumHabit.dataProvider().fields().toList()
            capaUnidaNumHabit_temp_data.addAttributes(attributes)
            capaUnidaNumHabit_temp.updateFields()
            capaUnidaNumHabit_temp_data.addFeatures(capaUnidaNumHabit_temp_features)
            if capaUnidaNumHabit_temp.isValid():
                QgsProject.instance().addMapLayer(capaUnidaNumHabit_temp)
                QApplication.processEvents()
            else:
                print("No s'ha pogut afegir el layer de numhabit")

            diagramNumHabit = QgsPieDiagram()
            diagramNumHabitSettings = QgsDiagramSettings()
            diagramNumHabitSettings.categoryColors = NumDiagramColors.values()
            diagramNumHabitSettings.categoryAttributes = NumDiagramColors.keys()
            diagramNumHabitSettings.scaleByArea = True
            diagramNumHabitSettings.categoryLabels = diagramNumHabitSettings.categoryAttributes
            diagramNumHabitSettings.enabled = True

            diagramNumHabitRenderer = QgsLinearlyInterpolatedDiagramRenderer()
            diagramNumHabitRenderer.setLowerValue(0)
            diagramNumHabitRenderer.setLowerSize(QSizeF(0, 0))
            diagramNumHabitRenderer.setUpperValue(self.maxTotalEE())
            diagramNumHabitRenderer.setUpperSize(QSizeF(30, 30))
            diagramNumHabitRenderer.setClassificationField("TotalEE")
            diagramNumHabitRenderer.setDiagram(diagramNumHabit)
            diagramNumHabitRenderer.setDiagramSettings(diagramNumHabitSettings)

            '''
            datadefinedsizelegend = QgsDataDefinedSizeLegend()
            datadefinedsizelegend.setSizeScaleField("TotalEE")
            datadefinedsizelegend.setSizeScaleFieldUnits(QgsUnitTypes.RenderMapUnits)
            datadefinedsizelegend.setClassifyEnabled(True)
            datadefinedsizelegend.setClassifyMode(QgsDataDefinedSizeLegend.Fractile)
            datadefinedsizelegend.setMinimumSize(QSizeF(0, 0))
            datadefinedsizelegend.setMaximumSize(QSizeF(30, 30))
            datadefinedsizelegend.setClassificationMethod(QgsDataDefinedSizeLegend.SizeLegendJenks)
            diagramNumHabitRenderer.setDataDefinedSizeLegend(datadefinedsizelegend)
            '''

            capaUnidaNumHabit_temp.setDiagramRenderer(diagramNumHabitRenderer)
            diagramNumHabitLayerSettings = QgsDiagramLayerSettings()
            capaUnidaNumHabit_temp.setDiagramLayerSettings(diagramNumHabitLayerSettings)

            capaUnidaNumHabit_temp.triggerRepaint()
            QApplication.processEvents()

            print(f"Aplicat renderer del diagrama, renderer: {capaUnidaNumHabit_temp.renderer()}")

            '''
            symbol = QgsSymbol.defaultSymbol(capaUnidaNumHabit_temp.geometryType())
            singlesymbolrenderer = QgsSingleSymbolRenderer(symbol)
            #singlesymbolrenderer.convertFromRenderer(diagramNumHabitRenderer)
            #singlesymbolrenderer.setDiagram(diagramNumHabit)
            #singlesymbolrenderer.setDiagramSettings(diagramNumHabitSettings)
            datadefinedsizelegend = QgsDataDefinedSizeLegend()
            'datadefinedsizelegend.AlignBottom=1'
            'datadefinedsizelegend.AlignCenter=0'
            'datadefinedsizelegend.LegendCollapsed=1'
            'datadefinedsizelegend.LegendSeparated=0'
            datadefinedsizelegend.setLegendType(QgsDataDefinedSizeLegend.LegendCollapsed)  
            datadefinedsizelegend.setVerticalAlignment(QgsDataDefinedSizeLegend.AlignBottom)
            datadefinedsizelegend.setClasses([
                QgsDataDefinedSizeLegend.SizeClass(92.0, '92'),
                QgsDataDefinedSizeLegend.SizeClass(80.0, '80'),
                QgsDataDefinedSizeLegend.SizeClass(60.0, '60'),
                QgsDataDefinedSizeLegend.SizeClass(40.0, '40'),
                QgsDataDefinedSizeLegend.SizeClass(20.0, '20')
            ])

            singlesymbolrenderer.setDataDefinedSizeLegend(datadefinedsizelegend)
            capaUnidaNumHabit_temp.setRenderer(singlesymbolrenderer)
            capaUnidaNumHabit_temp.triggerRepaint()
            '''

        if self.dlg.checkm2.isChecked():
            uri.setDataSource(schema1, f"Resum{entitat}Recomptem2", 'geom')
            capaUnidam2 = QgsVectorLayer(uri.uri(), f"Resum{entitat}Recomptem2", 'postgres')
            capaUnidam2_temp_features = [feat for feat in capaUnidam2.getFeatures()]
            capaUnidam2_temp = QgsVectorLayer("Polygon?crs=epsg:25831", f"Resum{entitat}Recomptem2", "memory")
            capaUnidam2_temp_data = capaUnidam2_temp.dataProvider()
            attributes = capaUnidam2.dataProvider().fields().toList()
            capaUnidam2_temp_data.addAttributes(attributes)
            capaUnidam2_temp.updateFields()
            capaUnidam2_temp_data.addFeatures(capaUnidam2_temp_features)
            if capaUnidam2_temp.isValid():
                QgsProject.instance().addMapLayer(capaUnidam2_temp)
                QApplication.processEvents()
            else:
                print("No s'ha pogut afegir el layer de m2")

            diagramm2 = QgsPieDiagram()
            diagramm2Settings = QgsDiagramSettings()
            diagramm2Settings.categoryColors = m2DiagramColors.values()
            diagramm2Settings.categoryAttributes = m2DiagramColors.keys()
            diagramm2Settings.scaleByArea = True
            diagramm2Settings.categoryLabels = diagramm2Settings.categoryAttributes
            diagramm2Settings.enabled = True

            diagramm2Renderer = QgsLinearlyInterpolatedDiagramRenderer()
            diagramm2Renderer.setLowerValue(0)
            diagramm2Renderer.setLowerSize(QSizeF(0, 0))
            diagramm2Renderer.setUpperValue(self.maxTotalm2())
            diagramm2Renderer.setUpperSize(QSizeF(100, 100))
            diagramm2Renderer.setClassificationField("Totalm2")
            diagramm2Renderer.setDiagram(diagramm2)
            diagramm2Renderer.setDiagramSettings(diagramm2Settings)

            capaUnidam2_temp.setDiagramRenderer(diagramm2Renderer)
            diagramm2LayerSettings = QgsDiagramLayerSettings()

            capaUnidam2_temp.setDiagramLayerSettings(diagramm2LayerSettings)
            capaUnidam2_temp.triggerRepaint()
            QApplication.processEvents()

        ''' Etiquetes de mitjana, mediana i moda '''

        label = QgsPalLayerSettings()
        label.enabled = True
        label.fieldName = """
        CASE
            WHEN "INDEX_consum" IS NOT NULL AND "INDEX_emissions" IS NOT NULL THEN concat('INDEX_consum: ', format_number("INDEX_consum", 2), ' KWh/m2any', '\nINDEX_emissions: ', format_number("INDEX_emissions", 2), ' KgCO2/m2any')
            WHEN "INDEX_consum" IS NOT NULL THEN concat('INDEX_consum: ', format_number("INDEX_consum", 2), ' KWh/m2any')
            WHEN "INDEX_emissions" IS NOT NULL THEN concat('INDEX_emissions: ', format_number("INDEX_emissions", 2), ' KgCO2/m2any')
            ELSE ''
        END
        """
        label.isExpression = True
        label.placement = QgsPalLayerSettings.AroundPoint

        if self.dlg.checkMitjana.isChecked():
            entitatLayerResumMitjana.setLabeling(QgsVectorLayerSimpleLabeling(label))
            entitatLayerResumMitjana.setLabelsEnabled(True)
            entitatLayerResumMitjana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMitjana)
            QApplication.processEvents()
        
        labelModa = QgsPalLayerSettings()
        labelModa.enabled = True
        labelModa.fieldName = """
        CASE
            WHEN "QualifMaxSup" IS NOT NULL AND "indexMODAsup" IS NOT NULL AND "indexMODAsupPonderat" IS NOT NULL THEN 'Moda: ' || to_string("QualifMaxSup") || '\nindexMODAsup: ' || format_number("indexMODAsup", 2) || ' KWh/m2any' || '\nindexMODAsupPonderat: ' || format_number("indexMODAsupPonderat", 2) || ' KWh/m2any'
            WHEN "QualifMaxSup" IS NOT NULL AND "indexMODAsup" IS NOT NULL THEN 'Moda: ' || to_string("QualifMaxSup") || '\nindexMODAsup: ' || format_number("indexMODAsup", 2) || ' KWh/m2any'
            WHEN "QualifMaxSup" IS NOT NULL AND "indexMODAsupPonderat" IS NOT NULL THEN 'Moda: ' || to_string("QualifMaxSup") || '\nindexMODAsupPonderat: ' || format_number("indexMODAsupPonderat", 2) || ' KWh/m2any'
            WHEN "indexMODAsup" IS NOT NULL AND "indexMODAsupPonderat" IS NOT NULL THEN 'indexMODAsup: ' || format_number("indexMODAsup", 2) || ' KWh/m2any' || '\nindexMODAsupPonderat: ' || format_number("indexMODAsupPonderat", 2) || ' KWh/m2any'
            WHEN "QualifMaxSup" IS NOT NULL THEN 'Moda: ' || to_string("QualifMaxSup")
            WHEN "indexMODAsup" IS NOT NULL THEN 'indexMODAsup: ' || format_number("indexMODAsup", 2) || ' KWh/m2any'
            WHEN "indexMODAsupPonderat" IS NOT NULL THEN 'indexMODAsupPonderat: ' || format_number("indexMODAsupPonderat", 2) || ' KWh/m2any'
            ELSE ''
        END
        """

        
        labelModa.isExpression = True
        labelModa.placement = QgsPalLayerSettings.AroundPoint
        
        if self.dlg.checkModa.isChecked():
            entitatLayerResumModa.setLabeling(QgsVectorLayerSimpleLabeling(labelModa))
            entitatLayerResumModa.setLabelsEnabled(True)
            entitatLayerResumModa.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumModa)
            QApplication.processEvents()
            
        labelMediana = QgsPalLayerSettings()
        labelMediana.enabled = True
        labelMediana.fieldName = """
        CASE
            WHEN "INDEX_mediana_consum" IS NOT NULL AND "INDEX_mediana_emissions" IS NOT NULL THEN concat('INDEX_mediana_consum: ', format_number("INDEX_mediana_consum", 2), ' KWh/m2any', '\nINDEX_mediana_emissions: ', format_number("INDEX_mediana_emissions", 2), ' KgCO2/m2any')
            WHEN "INDEX_mediana_consum" IS NOT NULL THEN concat('INDEX_mediana_consum: ', format_number("INDEX_mediana_consum", 2), ' KWh/m2any')
            WHEN "INDEX_mediana_emissions" IS NOT NULL THEN concat('INDEX_mediana_emissions: ', format_number("INDEX_mediana_emissions", 2), ' KgCO2/m2any')
            ELSE ''
        END
        """
        labelMediana.isExpression = True
        labelMediana.placement = QgsPalLayerSettings.AroundPoint

        if self.dlg.checkMediana.isChecked():
            entitatLayerResumMediana.setLabeling(QgsVectorLayerSimpleLabeling(labelMediana))
            entitatLayerResumMediana.setLabelsEnabled(True)
            entitatLayerResumMediana.triggerRepaint()
            QgsProject.instance().addMapLayer(entitatLayerResumMediana)
            QApplication.processEvents()

        self.dropFinalCapesIColumnes()
        textBox += f"PROCÉS FINALITZAT!\n"
        self.dlg.textEstat.setText(textBox)
        self.dlg.setEnabled(True)
        self.dlg.groupBD.setEnabled(True)
        self.dlg.groupChecks.setEnabled(True)
        self.dlg.groupEntitats.setEnabled(True)
        cur.close()
        conn.close()
        self.estatFinalitzat()
        QApplication.processEvents()

    def populateComboBox(self, combo, list, predef, sort):
        """Procediment per omplir el combo especificat amb la llista subministrada"""
        combo.blockSignals(True)
        combo.clear()
        model = QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0, predef)
                combo.setCurrentIndex(0)
        combo.blockSignals(False)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Eficiència Energetica'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.estatInicial()
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboBD, conn, 'Selecciona connexió', True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
